using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient; // Choose Microsoft.Data.SqlClient explicitly
using RestaurantManagementSystem.Models;
using RestaurantManagementSystem.ViewModels;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using MenuItemIngredientViewModelModel = RestaurantManagementSystem.Models.MenuItemIngredientViewModel;

namespace RestaurantManagementSystem.Controllers
{
    public class RecipeController : Controller
    {
        private readonly string _connectionString;
        private readonly IWebHostEnvironment _webHostEnvironment;

        public RecipeController(IConfiguration configuration, IWebHostEnvironment webHostEnvironment)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection");
            _webHostEnvironment = webHostEnvironment;
        }
        
        // GET: Recipe
        public IActionResult Index()
        {
            var recipes = GetAllRecipes();
            return View(recipes);
        }
        
        // GET: Recipe/Dashboard
        public IActionResult Dashboard()
        {
            var recipes = GetAllRecipes();
            return View(recipes);
        }
        
        // GET: Recipe/RecipeDebug
        public IActionResult RecipeDebug()
        {
            ViewBag.MenuItem = GetMenuItemById(1); // Just get any menu item for testing
            ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
            return View();
        }
        
        // GET: Recipe/CheckRecipeTables
        public IActionResult CheckRecipeTables()
        {
            var tablesStatus = new Dictionary<string, bool>();
            
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    connection.Open();
                    
                    string[] requiredTables = { "Recipes", "RecipeSteps", "MenuItems", "MenuItemIngredients", "Ingredients" };
                    
                    foreach (var table in requiredTables)
                    {
                        using (SqlCommand command = new SqlCommand($"SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{table}'", connection))
                        {
                            int count = (int)command.ExecuteScalar();
                            tablesStatus[table] = (count > 0);
                        }
                    }
                }
                
                return Json(new { 
                    tables = tablesStatus,
                    allTablesExist = tablesStatus.Values.All(exists => exists)
                });
            }
            catch (Exception ex)
            {
                return Json(new { error = ex.Message });
            }
        }
        
        // GET: Recipe/CheckRecipeStoredProcedures
        public IActionResult CheckRecipeStoredProcedures()
        {
            var spStatus = new Dictionary<string, bool>();
            
            try
            {
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    connection.Open();
                    
                    string[] requiredSPs = { "sp_ManageRecipe", "sp_ManageRecipeStep", "sp_ManageMenuItemIngredient", "sp_GetRecipeByMenuItemId" };
                    
                    foreach (var sp in requiredSPs)
                    {
                        using (SqlCommand command = new SqlCommand($"SELECT COUNT(*) FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = '{sp}' AND ROUTINE_TYPE = 'PROCEDURE'", connection))
                        {
                            int count = (int)command.ExecuteScalar();
                            spStatus[sp] = (count > 0);
                        }
                    }
                }
                
                return Json(new { 
                    procedures = spStatus,
                    allProceduresExist = spStatus.Values.All(exists => exists)
                });
            }
            catch (Exception ex)
            {
                return Json(new { error = ex.Message });
            }
        }
        
        // GET: Recipe/SetupRecipeScripts
        public IActionResult SetupRecipeScripts()
        {
            try
            {
                ExecuteMenuRecipeSetupScript();
                return Json(new { success = true, message = "Recipe scripts setup complete" });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        // GET: Recipe/Details/5
        public IActionResult Details(int id)
        {
            // First ensure the stored procedures are created
            ExecuteMenuRecipeSetupScript();
            
            try
            {
                var recipe = GetRecipeByMenuItemId(id);
                if (recipe == null)
                {
                    // If no recipe exists, redirect to create
                    return RedirectToAction("Create", new { menuItemId = id });
                }

                return View(recipe);
            }
            catch (Exception ex)
            {
                // Log the error and redirect to create a recipe
                Console.WriteLine($"Error in Recipe Details: {ex.Message}");
                return RedirectToAction("Create", new { menuItemId = id });
            }
        }

        // GET: Recipe/Create/5 (where 5 is the MenuItemId)
        public IActionResult Create(int menuItemId)
        {
            var menuItem = GetMenuItemById(menuItemId);
            if (menuItem == null)
            {
                return NotFound();
            }

            ViewBag.MenuItem = menuItem;
            ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
            ViewBag.HasIngredients = menuItem.Ingredients != null && menuItem.Ingredients.Any();
            
            var recipeViewModel = new RecipeViewModel
            {
                MenuItemId = menuItemId,
                Title = $"Recipe for {menuItem.Name}",
                PreparationTimeMinutes = 15,
                CookingTimeMinutes = 15,
                Yield = 1,
                YieldPercentage = 100
            };
            
            return View(recipeViewModel);
        }

        // POST: Recipe/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(RecipeViewModel model)
        {
            try
            {
                // First ensure the stored procedures are created
                ExecuteMenuRecipeSetupScript();
                
                // Check if request is AJAX
                bool isAjaxRequest = Request.Headers["X-Requested-With"] == "XMLHttpRequest";
                
                if (!ModelState.IsValid)
                {
                    if (isAjaxRequest)
                        return Json(new { success = false, message = "Model validation failed", errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage) });
                    
                    ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                    return View(model);
                }
                
                int recipeId = -1;
                
                // Ensure CookingTimeMinutes is set to avoid parameter validation error
                if (model.CookingTimeMinutes <= 0)
                {
                    model.CookingTimeMinutes = 15;
                }
                
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    connection.Open();
                    
                    // Step 1: Create the recipe
                    try
                    {
                        using (SqlCommand command = new SqlCommand("sp_ManageRecipe", connection))
                        {
                            command.CommandType = System.Data.CommandType.StoredProcedure;
                            
                            command.Parameters.AddWithValue("@MenuItemId", model.MenuItemId);
                            command.Parameters.AddWithValue("@Title", model.Title);
                            command.Parameters.AddWithValue("@PreparationInstructions", model.PreparationInstructions);
                            command.Parameters.AddWithValue("@CookingInstructions", model.CookingInstructions);
                            command.Parameters.AddWithValue("@PlatingInstructions", model.PlatingInstructions ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@Yield", model.Yield);
                            command.Parameters.AddWithValue("@YieldPercentage", model.YieldPercentage);
                            command.Parameters.AddWithValue("@PreparationTimeMinutes", model.PreparationTimeMinutes);
                            command.Parameters.AddWithValue("@CookingTimeMinutes", model.CookingTimeMinutes);
                            command.Parameters.AddWithValue("@Notes", model.Notes ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@UserId", 1); // TODO: Get from authentication
                            
                            using (SqlDataReader reader = command.ExecuteReader())
                            {
                                if (reader.Read())
                                {
                                    recipeId = reader.GetInt32(reader.GetOrdinal("RecipeId"));
                                    Console.WriteLine($"Recipe created successfully with ID: {recipeId}");
                                }
                                else
                                {
                                    ModelState.AddModelError("", "Failed to create recipe - no RecipeId returned");
                                    Console.WriteLine("Failed to create recipe - no RecipeId returned");
                                    
                                    if (isAjaxRequest)
                                        return Json(new { success = false, message = "Failed to create recipe - no RecipeId returned" });
                                    
                                    ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                                    return View(model);
                                }
                            }
                        }
                    }
                    catch (SqlException sqlEx)
                    {
                        ModelState.AddModelError("", $"SQL Error creating recipe: {sqlEx.Message} (Error Number: {sqlEx.Number})");
                        Console.WriteLine($"SQL Error creating recipe: {sqlEx.Message} (Error Number: {sqlEx.Number})");
                        
                        if (isAjaxRequest)
                            return Json(new { success = false, message = $"SQL Error creating recipe: {sqlEx.Message}" });
                        
                        ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                        return View(model);
                    }
                    
                    // Step 2: Add recipe steps if provided
                    if (recipeId > 0 && model.Steps != null && model.Steps.Count > 0)
                    {
                        // Verify recipe exists before adding steps
                        bool recipeExists = false;
                        using (SqlCommand verifyCommand = new SqlCommand(
                            "SELECT COUNT(*) FROM [dbo].[Recipes] WHERE [Id] = @RecipeId", connection))
                        {
                            verifyCommand.Parameters.AddWithValue("@RecipeId", recipeId);
                            int count = (int)verifyCommand.ExecuteScalar();
                            recipeExists = (count > 0);
                        }
                        
                        if (!recipeExists)
                        {
                            ModelState.AddModelError("", $"Cannot add recipe steps: Recipe ID {recipeId} does not exist in database");
                            
                            if (isAjaxRequest)
                                return Json(new { success = false, message = $"Cannot add recipe steps: Recipe ID {recipeId} does not exist in database" });
                            
                            ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                            return View(model);
                        }
                        
                        for (int i = 0; i < model.Steps.Count; i++)
                        {
                            var step = model.Steps[i];
                            
                            try
                            {
                                using (SqlCommand command = new SqlCommand("sp_ManageRecipeStep", connection))
                                {
                                    command.CommandType = System.Data.CommandType.StoredProcedure;
                                    
                                    command.Parameters.AddWithValue("@RecipeId", recipeId);
                                    command.Parameters.AddWithValue("@StepNumber", i + 1);
                                    command.Parameters.AddWithValue("@Description", step.Description);
                                    command.Parameters.AddWithValue("@TimeRequiredMinutes", step.TimeRequiredMinutes ?? (object)DBNull.Value);
                                    command.Parameters.AddWithValue("@Temperature", step.Temperature ?? (object)DBNull.Value);
                                    command.Parameters.AddWithValue("@SpecialEquipment", step.SpecialEquipment ?? (object)DBNull.Value);
                                    command.Parameters.AddWithValue("@Tips", step.Tips ?? (object)DBNull.Value);
                                    command.Parameters.AddWithValue("@ImagePath", step.ImagePath ?? (object)DBNull.Value);
                                    command.Parameters.AddWithValue("@IsUpdate", false);
                                    
                                    command.ExecuteNonQuery();
                                }
                            }
                            catch (SqlException sqlEx)
                            {
                                // If it's a foreign key constraint error, provide a helpful message
                                if (sqlEx.Number == 547) // Foreign key constraint error
                                {
                                    ModelState.AddModelError("", $"Foreign key constraint error adding recipe step: {sqlEx.Message}");
                                    
                                    if (isAjaxRequest)
                                        return Json(new { success = false, message = $"Foreign key constraint error adding recipe step: {sqlEx.Message}" });
                                    
                                    ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                                    return View(model);
                                }
                                else
                                {
                                    throw; // Rethrow other SQL exceptions
                                }
                            }
                        }
                    }
                    
                    // Step 3: Add ingredients if provided
                    if (model.Ingredients != null && model.Ingredients.Count > 0)
                    {
                        foreach (var ingredient in model.Ingredients)
                        {
                            try
                            {
                                using (SqlCommand command = new SqlCommand("sp_ManageMenuItemIngredient", connection))
                                {
                                    command.CommandType = System.Data.CommandType.StoredProcedure;
                                    
                                    command.Parameters.AddWithValue("@MenuItemId", model.MenuItemId);
                                    command.Parameters.AddWithValue("@IngredientId", ingredient.IngredientId);
                                    command.Parameters.AddWithValue("@Quantity", ingredient.Quantity);
                                    command.Parameters.AddWithValue("@Unit", ingredient.Unit);
                                    command.Parameters.AddWithValue("@IsOptional", ingredient.IsOptional);
                                    command.Parameters.AddWithValue("@Instructions", ingredient.Instructions ?? (object)DBNull.Value);
                                    
                                    command.ExecuteNonQuery();
                                }
                            }
                            catch (SqlException sqlEx)
                            {
                                ModelState.AddModelError("", $"Error adding ingredient: {sqlEx.Message}");
                                Console.WriteLine($"Error adding ingredient: {sqlEx.Message}");
                                
                                if (isAjaxRequest)
                                    return Json(new { success = false, message = $"Error adding ingredient: {sqlEx.Message}" });
                                
                                ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                                return View(model);
                            }
                        }
                    }
                }
                
                if (isAjaxRequest)
                {
                    return Json(new { 
                        success = true, 
                        message = $"Recipe for {GetMenuItemById(model.MenuItemId).Name} created successfully!",
                        recipeId = recipeId
                    });
                }
                
                TempData["SuccessMessage"] = $"Recipe for {GetMenuItemById(model.MenuItemId).Name} created successfully! You can now view it on the menu details page.";
                return RedirectToAction("Details", "Menu", new { id = model.MenuItemId });
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("", $"Unexpected error creating recipe: {ex.Message}");
                Console.WriteLine($"Unexpected error creating recipe: {ex.Message}");
                
                bool isAjaxRequest = Request.Headers["X-Requested-With"] == "XMLHttpRequest";
                if (isAjaxRequest)
                    return Json(new { success = false, message = $"Unexpected error creating recipe: {ex.Message}" });
                
                ViewBag.Ingredients = new SelectList(GetAllIngredients(), "Id", "IngredientsName");
                return View(model);
            }
        }
    }
}
