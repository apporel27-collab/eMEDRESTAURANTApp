using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.Sql        public IActionResult UserForm(int? id, bool isView = false)
        {
            User model = new User { Username = "", FirstName = "", LastName = "" };
            ViewBag.IsView = isView;
            ViewBag.Roles = Enum.GetValues(typeof(UserRole))
                .Cast<UserRole>()
                .Where(r => r < UserRole.CRMMarketing) // Filter out system integration roles
                .Select(r => new { Id = (int)r, Name = r.ToString() })
                .ToList();

            if (id.HasValue)
            {
                using (var con = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
                {
                    con.Open();
                    
                    // Ensure table columns exist
                    EnsureUserTableColumns(con);
                    
                    using (var cmd = new SqlCommand("SELECT * FROM Users WHERE Id = @Id", con))
                    {rosoft.Extensions.Configuration;
using RestaurantManagementSystem.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace RestaurantManagementSystem.Controllers
{
    public class UserController : Controller
    {
        private readonly IConfiguration _config;

        public UserController(IConfiguration configuration)
        {
            _config = configuration;
        }

        // Users List
        public IActionResult UserList()
        {
            var users = new List<User>();
            using (var con = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                con.Open();
                
                // Fix User table schema if needed
                EnsureUserTableColumns(con);
                
                using (var cmd = new SqlCommand("SELECT Id, Username, FirstName, LastName, Email, Phone, Role, IsActive FROM Users", con))
                {
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            users.Add(new User
                            {
                                Id = reader.GetInt32(0),
                                Username = reader.IsDBNull(1) ? string.Empty : reader.GetString(1),
                                FirstName = reader.IsDBNull(2) ? string.Empty : reader.GetString(2),
                                LastName = reader.IsDBNull(3) ? string.Empty : reader.GetString(3),
                                Email = reader.IsDBNull(4) ? string.Empty : reader.GetString(4),
                                Phone = reader.IsDBNull(5) ? string.Empty : reader.GetString(5),
                                Role = (UserRole)reader.GetInt32(6),
                                IsActive = reader.GetBoolean(7)
                            });
                        }
                    }
                }
            }
            return View(users);
        }

        // User Add/Edit/View Form
        public IActionResult UserForm(int? id, bool isView = false)
        {
            User model = new User { Username = "", FirstName = "", LastName = "" };
            ViewBag.IsView = isView;
            ViewBag.Roles = Enum.GetValues(typeof(UserRole))
                .Cast<UserRole>()
                .Where(r => r < UserRole.CRMMarketing) // Filter out system integration roles
                .Select(r => new { Id = (int)r, Name = r.ToString() })
                .ToList();

            if (id.HasValue)
            {
                using (var con = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
                {
                    con.Open();
                    using (var cmd = new SqlCommand("SELECT Id, Username, FirstName, LastName, Email, Phone, Role, IsActive FROM Users WHERE Id = @Id", con))
                    {
                        cmd.Parameters.AddWithValue("@Id", id.Value);
                        using (var reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                model.Id = reader.GetInt32(0);
                                model.Username = reader.IsDBNull(1) ? string.Empty : reader.GetString(1);
                                model.FirstName = reader.IsDBNull(2) ? string.Empty : reader.GetString(2);
                                model.LastName = reader.IsDBNull(3) ? string.Empty : reader.GetString(3);
                                model.Email = reader.IsDBNull(4) ? string.Empty : reader.GetString(4);
                                model.Phone = reader.IsDBNull(5) ? string.Empty : reader.GetString(5);
                                model.Role = (UserRole)reader.GetInt32(6);
                                model.IsActive = reader.GetBoolean(7);
                            }
                        }
                    }
                }
            }
            return View(model);
        }

        [HttpPost]
        public IActionResult UserForm(User model, string password)
        {
            string resultMessage = "";
            using (var con = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                con.Open();
                
                // Check if updating and Id exists
                if (model.Id > 0)
                {
                    using (var checkCmd = new SqlCommand("SELECT COUNT(*) FROM Users WHERE Id = @Id", con))
                    {
                        checkCmd.Parameters.AddWithValue("@Id", model.Id);
                        int count = (int)checkCmd.ExecuteScalar();
                        if (count == 0)
                        {
                            TempData["ResultMessage"] = "User update failed. Id not found.";
                            return RedirectToAction("UserList");
                        }
                    }
                }
                
                using (var cmd = new SqlCommand("usp_UpsertUser", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", model.Id == 0 ? 0 : model.Id);
                    cmd.Parameters.AddWithValue("@Username", model.Username);
                    
                    // Only update password if provided (for edits)
                    if (!string.IsNullOrEmpty(password))
                    {
                        cmd.Parameters.AddWithValue("@Password", password); // Should be hashed in production
                    }
                    else if (model.Id == 0)
                    {
                        cmd.Parameters.AddWithValue("@Password", "DefaultPassword123"); // Default password for new users
                    }
                    else
                    {
                        cmd.Parameters.AddWithValue("@Password", DBNull.Value);
                    }
                    
                    cmd.Parameters.AddWithValue("@FirstName", model.FirstName);
                    cmd.Parameters.AddWithValue("@LastName", model.LastName ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@Email", model.Email ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@Phone", model.Phone ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@Role", (int)model.Role);
                    cmd.Parameters.AddWithValue("@IsActive", model.IsActive);

                    using (var reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            resultMessage = reader["Message"].ToString();
                        }
                    }
                }
            }
            TempData["ResultMessage"] = resultMessage;
            return RedirectToAction("UserList");
        }
        
        private void EnsureUserTableColumns(SqlConnection connection)
        {
            try
            {
                // Check and add Phone column if needed
                using (var cmd = new SqlCommand(
                    "IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('dbo.Users') AND name = 'Phone') " +
                    "ALTER TABLE [dbo].[Users] ADD [Phone] NVARCHAR(20) NULL", connection))
                {
                    cmd.ExecuteNonQuery();
                }

                // Check and add Role column if needed
                using (var cmd = new SqlCommand(
                    "IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('dbo.Users') AND name = 'Role') " +
                    "ALTER TABLE [dbo].[Users] ADD [Role] INT NOT NULL DEFAULT 3", connection))
                {
                    cmd.ExecuteNonQuery();
                }

                // Update Role from RoleId if needed
                using (var cmd = new SqlCommand(
                    "IF EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('dbo.Users') AND name = 'RoleId') " +
                    "UPDATE [dbo].[Users] SET [Role] = [RoleId] WHERE [Role] <> [RoleId]", connection))
                {
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error ensuring User table columns: {ex.Message}");
                // Continue execution to see if the query works now
            }
        }
    }
}
