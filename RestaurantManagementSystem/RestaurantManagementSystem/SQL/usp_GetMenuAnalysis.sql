-- Stored procedure: usp_GetMenuAnalysis
-- Parameters: @FromDate DATE, @ToDate DATE
-- Result sets:
-- 1) Summary: TotalItemsSold, TotalRevenue, AveragePrice, OverallGP
-- 2) TopItems: MenuItemId, ItemName, QuantitySold, Revenue, Profit
-- 3) CategoryPerformance: CategoryName, ItemsSold, Revenue, AverageGP
-- 4) SeasonalTrends: PeriodLabel, ItemsSold, Revenue
-- 5) Recommendations: RecommendationText, Rationale

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF OBJECT_ID('dbo.usp_GetMenuAnalysis', 'P') IS NOT NULL
    DROP PROCEDURE dbo.usp_GetMenuAnalysis
GO

CREATE PROCEDURE dbo.usp_GetMenuAnalysis
    @FromDate DATE = NULL,
    @ToDate DATE = NULL
AS
BEGIN
    SET NOCOUNT ON;

    -- Normalize input dates: if null, default to last 30 days
    DECLARE @Start DATETIME = COALESCE(CAST(@FromDate AS DATETIME), DATEADD(day, -30, CAST(GETDATE() AS DATE)));
    -- Make @End be exclusive (next day at 00:00) so comparisons use < @End
    DECLARE @End DATETIME = DATEADD(day, 1, COALESCE(CAST(@ToDate AS DATETIME), CAST(GETDATE() AS DATE)));

    -- 1) Summary
    SELECT 
        ISNULL(SUM(oi.Quantity), 0) AS TotalItemsSold,
        ISNULL(SUM(oi.Quantity * oi.UnitPrice), 0) AS TotalRevenue,
        CASE WHEN ISNULL(SUM(oi.Quantity),0) = 0 THEN 0 ELSE ISNULL(SUM(oi.Quantity * oi.UnitPrice),0) / NULLIF(ISNULL(SUM(oi.Quantity),0),0) END AS AveragePrice,
        0.0 AS OverallGP -- Placeholder, requires cost data
    FROM OrderItems oi
    INNER JOIN Orders o ON oi.OrderId = o.Id
    WHERE o.CreatedAt >= @Start AND o.CreatedAt < @End

    -- 2) Top Items
    SELECT TOP 10
        mi.Id AS MenuItemId,
        mi.Name AS ItemName,
        SUM(oi.Quantity) AS QuantitySold,
        SUM(oi.Quantity * oi.UnitPrice) AS Revenue,
        0.0 AS Profit
    FROM OrderItems oi
    INNER JOIN Orders o ON oi.OrderId = o.Id
    INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
    WHERE o.CreatedAt >= @Start AND o.CreatedAt < @End
    GROUP BY mi.Id, mi.Name
    ORDER BY QuantitySold DESC

    -- 3) Category Performance
    SELECT
        c.Name AS CategoryName,
        SUM(oi.Quantity) AS ItemsSold,
        SUM(oi.Quantity * oi.UnitPrice) AS Revenue,
        0.0 AS AverageGP
    FROM OrderItems oi
    INNER JOIN Orders o ON oi.OrderId = o.Id
    INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
    INNER JOIN Categories c ON mi.CategoryId = c.Id
    WHERE o.CreatedAt >= @Start AND o.CreatedAt < @End
    GROUP BY c.Name
    ORDER BY Revenue DESC

    -- 4) Seasonal Trends (by week)
    SELECT
        CONVERT(varchar(10), DATEADD(week, DATEDIFF(week, 0, o.CreatedAt), 0), 120) AS PeriodLabel,
        SUM(oi.Quantity) AS ItemsSold,
        SUM(oi.Quantity * oi.UnitPrice) AS Revenue
    FROM OrderItems oi
    INNER JOIN Orders o ON oi.OrderId = o.Id
    WHERE o.CreatedAt >= @Start AND o.CreatedAt < @End
    GROUP BY DATEADD(week, DATEDIFF(week, 0, o.CreatedAt), 0)
    ORDER BY PeriodLabel

    -- 5) Recommendations (basic heuristics)
    SELECT TOP 5
        CASE WHEN t.QuantitySold > 50 AND t.Revenue / NULLIF(t.QuantitySold,0) < 100 THEN 'Promote: High volume, low price - consider upsell or price increase' 
             WHEN t.QuantitySold < 10 AND t.Revenue > 1000 THEN 'Consider removing: Low volume but high revenue volatility' 
             ELSE 'Monitor performance' END AS RecommendationText,
        'Generated by basic heuristics' AS Rationale
    FROM (
        SELECT mi.Id, mi.Name, SUM(oi.Quantity) AS QuantitySold, SUM(oi.Quantity * oi.UnitPrice) AS Revenue
        FROM OrderItems oi
        INNER JOIN Orders o ON oi.OrderId = o.Id
        INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
    WHERE o.CreatedAt >= @Start AND o.CreatedAt < @End
        GROUP BY mi.Id, mi.Name
    ) t
    ORDER BY t.QuantitySold DESC
END
GO
