@model RestaurantManagementSystem.Models.DashboardViewModel
@{
    ViewData["Title"] = "Restaurant Dashboard";
}

<!-- Add jQuery FIRST, before other plugins -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>

<!-- DataTables temporarily disabled to fix JavaScript error -->
<!-- <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script> -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/chart.js">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    :root {
        --primary-color: #3498db;
        --secondary-color: #2ecc71;
        --accent-color: #f39c12;
        --danger-color: #e74c3c;
        --dark-color: #2c3e50;
        --light-color: #ecf0f1;
        --info-color: #1abc9c;
    }
    
    body {
        background-color: #f8f9fa;
        color: var(--dark-color);
    }
    
    .dashboard-header {
        background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        position: relative;
        overflow: hidden;
    }
    
    .dashboard-header h1 {
        margin: 0;
        font-weight: 300;
        font-size: 2.5rem;
    }
    
    .dashboard-header p {
        margin-top: 10px;
        opacity: 0.9;
        font-size: 1.1rem;
    }
    
    .user-info {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid rgba(255,255,255,0.2);
    }
    
    .user-role-badge {
        display: inline-block;
        margin-right: 5px;
        margin-bottom: 5px;
        padding: 3px 8px;
        background-color: rgba(255,255,255,0.2);
        color: white;
        border-radius: 15px;
        font-size: 0.8rem;
    }
    
    .last-login {
        font-size: 0.9rem;
        margin-top: 10px;
        opacity: 0.7;
    }
    
    .stats-card {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin-bottom: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .stats-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }
    
    .stats-card .icon {
        font-size: 1.75rem;
        margin-bottom: 12px;
        display: inline-block;
        padding: 12px;
        border-radius: 50%;
        color: white;
    }
    
    .stats-card.sales .icon {
        background-color: var(--primary-color);
    }
    
    .stats-card.orders .icon {
        background-color: var(--secondary-color);
    }
    
    .stats-card.customers .icon {
        background-color: var(--accent-color);
    }
    
    .stats-card.inventory .icon {
        background-color: var(--info-color);
    }
    
    .stats-card h3 {
        font-size: 1.25rem;
        margin-bottom: 5px;
        font-weight: 600;
    }
    
    .stats-card p.number {
        font-size: 1.75rem;
        margin-bottom: 0;
        font-weight: 700;
    }
    
    .stats-card p.text-muted {
        font-size: 0.9rem;
    }
    
    .chart-container {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }
    
    .data-table-container {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .data-table-container h3 {
        margin-bottom: 20px;
        color: var(--dark-color);
        border-bottom: 2px solid var(--primary-color);
        padding-bottom: 10px;
    }
    
    .action-buttons .btn {
        margin-right: 10px;
        border-radius: 5px;
    }
    
    .reservation-container {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }
    
    .table-responsive {
        overflow-x: auto;
    }
    
    .badge-custom {
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: 500;
    }
    
    .badge-success {
        background-color: var(--secondary-color);
        color: white;
    }
    
    .badge-warning {
        background-color: var(--accent-color);
        color: white;
    }
    
    .badge-danger {
        background-color: var(--danger-color);
        color: white;
    }
    
    .cuisine-search {
        position: relative;
        margin-bottom: 20px;
    }
    
    .cuisine-results {
        position: absolute;
        width: 100%;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
        border-radius: 0 0 10px 10px;
    }
    
    .reservation-form .form-control {
        margin-bottom: 15px;
    }
    
    .quick-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .quick-action-btn {
        flex: 1;
        text-align: center;
        padding: 15px;
        background-color: var(--light-color);
        border-radius: 10px;
        transition: all 0.3s ease;
        text-decoration: none;
        color: inherit;
        display: block;
    }
    
    .quick-action-btn:hover {
        background-color: var(--primary-color);
        color: white;
        cursor: pointer;
        text-decoration: none;
    }
    
    .quick-action-btn i {
        font-size: 1.5rem;
        margin-bottom: 10px;
        display: block;
    }
</style>

@{
    ViewData["Title"] = "Home Page";
}

<div class="container-fluid p-0">
    <div class="dashboard-container">
        <div class="dashboard-header">
            <h1><i class="fas fa-utensils me-2"></i>Restaurant Dashboard</h1>
            <p>Welcome back, <strong>@Model.UserFullName</strong>!</p>
            
            <div class="user-info">
                <div>
                    <strong>Roles:</strong>
                    @foreach (var role in Model.UserRoles)
                    {
                        <span class="user-role-badge">@role</span>
                    }
                </div>
                
                <div class="last-login">
                    <i class="fas fa-clock me-1"></i> Last login: @Model.LastLoginDate.ToString("MMM d, yyyy h:mm tt")
                </div>
            </div>
        </div>
        

        <!-- Stats Cards -->
        <div class="row stats-container">
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="stats-card sales py-2">
                    <span class="icon"><i class="fas fa-dollar-sign"></i></span>
                    <h3>Today's Sales</h3>
                    <p class="number">₹@Model.TodaySales.ToString("N2")</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="stats-card orders py-2">
                    <span class="icon"><i class="fas fa-shopping-cart"></i></span>
                    <h3>Today's Orders</h3>
                    <p class="number">@Model.TodayOrders</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="stats-card tables py-2">
                    <span class="icon"><i class="fas fa-chair"></i></span>
                    <h3>Active Tables</h3>
                    <p class="number">@Model.ActiveTables</p>
                </div>
            </div>
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="stats-card reservations py-2">
                    <span class="icon"><i class="fas fa-calendar-check"></i></span>
                    <h3>Upcoming Reservations</h3>
                    <p class="number">@Model.UpcomingReservations</p>
                </div>
            </div>
        </div>    <!-- Quick Action Buttons -->
    <div class="row mb-4">
        <div class="col-12">
            <h4 class="mb-3">Quick Actions</h4>
            <div class="quick-actions">
                <a href="/Order/Create" class="quick-action-btn">
                    <i class="fas fa-utensils"></i>
                    <span>New Order</span>
                </a>
                <a href="/Reservation/Create" class="quick-action-btn">
                    <i class="fas fa-calendar-plus"></i>
                    <span>Reservation</span>
                </a>
                <div class="quick-action-btn" id="menuItemsBtn" data-toggle="modal" data-target="#menuItemsModal">
                    <i class="fas fa-hamburger"></i>
                    <span>Menu Items</span>
                </div>
                <div class="quick-action-btn">
                    <i class="fas fa-chart-bar"></i>
                    <span>Reports</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Sales Chart -->
        <div class="col-lg-8 mb-4">
            <div class="chart-container">
                <h3>Sales Overview</h3>
                <canvas id="salesChart" height="250"></canvas>
            </div>
        </div>

        <!-- Reservation Form -->
        <div class="col-lg-4 mb-4">
            <div class="reservation-container">
                <h3>Quick Reservation</h3>
                <div class="reservation-form">
                    <div class="form-group">
                        <label for="customerName">Customer Name</label>
                        <input type="text" id="customerName" class="form-control" placeholder="Enter customer name">
                    </div>
                    <div class="form-group">
                        <label for="reservationDate">Date</label>
                        <input type="text" id="reservationDate" class="form-control" placeholder="Select date">
                    </div>
                    <div class="form-group">
                        <label for="reservationTime">Time</label>
                        <input type="text" id="reservationTime" class="form-control" placeholder="Select time">
                    </div>
                    <div class="form-group">
                        <label for="partySize">Party Size</label>
                        <select id="partySize" class="form-control">
                            <option>1 person</option>
                            <option>2 people</option>
                            <option>3 people</option>
                            <option>4 people</option>
                            <option>5 people</option>
                            <option>6 people</option>
                            <option>7+ people</option>
                        </select>
                    </div>
                    <button class="btn btn-primary w-100 mt-3">Make Reservation</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Orders Table -->
    <div class="row">
        <div class="col-12 mb-4">
            <div class="data-table-container">
                <h3>Recent Orders</h3>
                <div class="table-responsive">
                    <table id="restaurantTable" class="table table-striped">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Table</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in Model.RecentOrders)
                            {
                                <tr>
                                    <td>@order.OrderNumber</td>
                                    <td>@order.CustomerName</td>
                                    <td>@order.TableNumber</td>
                                    <td>₹@order.TotalAmount.ToString("N2")</td>
                                    <td>
                                        @{
                                            string badgeClass = order.Status.ToLower() switch
                                            {
                                                "completed" => "badge-success",
                                                "in progress" or "preparing" => "badge-warning",
                                                "cancelled" => "badge-danger",
                                                "pending" => "badge-info",
                                                _ => "badge-secondary"
                                            };
                                        }
                                        <span class="badge badge-custom @badgeClass">@order.Status</span>
                                    </td>
                                    <td>@order.OrderTime</td>
                                    <td>
                                        <a href="@Url.Action("Details", "Order", new { id = order.OrderId })" class="btn btn-sm btn-primary"><i class="fas fa-eye"></i></a>
                                        <button class="btn btn-sm btn-info print-order" data-order-id="@order.OrderId"><i class="fas fa-print"></i></button>
                                    </td>
                                </tr>
                            }
                            @if (!Model.RecentOrders.Any())
                            {
                                <tr>
                                    <td colspan="7" class="text-center">No recent orders found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Most Popular Menu Items -->
    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="chart-container">
                <h3>Popular Menu Items</h3>
                <canvas id="menuItemsChart" height="300"></canvas>
            </div>
        </div>

        <div class="col-lg-6 mb-4">
            <div class="chart-container">
                <h3>Customers by Time</h3>
                <canvas id="customerTimeChart" height="300"></canvas>
            </div>
        </div>
    </div>
    
    <!-- Cuisine Search -->
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="data-table-container">
                <h3>Cuisine Search</h3>
                <div class="cuisine-search">
                    <input type="text" id="cuisineSearch" class="form-control" placeholder="Search for cuisines">
                    <div class="cuisine-results">
                        <ul id="cuisineList" class="list-group"></ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="data-table-container">
                <h3>Low Inventory Items</h3>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Item</th>
                                <th>Current Stock</th>
                                <th>Minimum</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.LowInventoryItems)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.CurrentStock @item.Unit</td>
                                    <td>@item.MinimumStock @item.Unit</td>
                                    <td>
                                        @{
                                            string badgeClass = "badge-danger";
                                            string status = "Critical";
                                            
                                            if (item.CurrentStock >= item.MinimumStock * 0.5m)
                                            {
                                                badgeClass = "badge-warning";
                                                status = "Low";
                                            }
                                        }
                                        <span class="badge badge-custom @badgeClass">@status</span>
                                    </td>
                                </tr>
                            }
                            @if (!Model.LowInventoryItems.Any())
                            {
                                <tr>
                                    <td colspan="4" class="text-center">No low inventory items</td>
                                </tr>
                            }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <!-- Initialize charts and scripts -->
    <script>
        $(document).ready(function () {
            // Temporarily disable DataTable to avoid JavaScript errors
            // Will re-enable after fixing the table structure issue
            console.log('Recent Orders table loaded successfully without DataTables');
            
            // Initialize Date and Time pickers
            $("#reservationDate").datepicker();
            $("#reservationTime").timepicker({
                'timeFormat': 'h:i A',
                'interval': 30,
                'minTime': '10',
                'maxTime': '11:00pm',
                'startTime': '10:00',
                'dynamic': false,
                'dropdown': true,
                'scrollbar': true
            });

            // Sales Chart - Get data from model
            var salesLabels = @Html.Raw(Json.Serialize(Model.SalesData.Select(x => x.Day).ToArray()));
            var salesData = @Html.Raw(Json.Serialize(Model.SalesData.Select(x => x.Amount).ToArray()));
            
            // Generate last week data as 90% of this week for demonstration
            var lastWeekData = salesData.map(function(val) { 
                return Math.round(val * 0.9); 
            });

            var salesCtx = document.getElementById('salesChart').getContext('2d');
            var salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: salesLabels,
                    datasets: [{
                        label: 'This Week',
                        data: salesData,
                        backgroundColor: 'rgba(52, 152, 219, 0.2)',
                        borderColor: 'rgba(52, 152, 219, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(52, 152, 219, 1)',
                        tension: 0.3
                    }, {
                        label: 'Last Week',
                        data: lastWeekData,
                        backgroundColor: 'rgba(46, 204, 113, 0.2)',
                        borderColor: 'rgba(46, 204, 113, 1)',
                        borderWidth: 2,
                        pointBackgroundColor: 'rgba(46, 204, 113, 1)',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '₹' + value;
                                }
                            }
                        }
                    }
                }
            });

            // Popular Menu Items Chart - Get data from model
            var menuItemLabels = @Html.Raw(Json.Serialize(Model.PopularMenuItems.Select(x => x.Name).ToArray()));
            var menuItemData = @Html.Raw(Json.Serialize(Model.PopularMenuItems.Select(x => x.OrderCount).ToArray()));
            
            var menuItemsCtx = document.getElementById('menuItemsChart').getContext('2d');
            var menuItemsChart = new Chart(menuItemsCtx, {
                type: 'doughnut',
                data: {
                    labels: menuItemLabels,
                    datasets: [{
                        data: menuItemData,
                        backgroundColor: [
                            'rgba(52, 152, 219, 0.8)',
                            'rgba(46, 204, 113, 0.8)',
                            'rgba(243, 156, 18, 0.8)',
                            'rgba(231, 76, 60, 0.8)',
                            'rgba(155, 89, 182, 0.8)'
                        ],
                        borderColor: [
                            'rgba(52, 152, 219, 1)',
                            'rgba(46, 204, 113, 1)',
                            'rgba(243, 156, 18, 1)',
                            'rgba(231, 76, 60, 1)',
                            'rgba(155, 89, 182, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                        }
                    }
                }
            });

            // Customers by Time Chart - Get data from model
            var timeLabels = @Html.Raw(Json.Serialize(Model.CustomersByTime.Select(x => x.Hour + (x.Hour >= 12 ? " PM" : " AM")).ToArray()));
            var customerData = @Html.Raw(Json.Serialize(Model.CustomersByTime.Select(x => x.CustomerCount).ToArray()));
            
            var customerTimeCtx = document.getElementById('customerTimeChart').getContext('2d');
            var customerTimeChart = new Chart(customerTimeCtx, {
                type: 'bar',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Number of Customers',
                        data: customerData,
                        backgroundColor: 'rgba(52, 152, 219, 0.8)',
                        borderColor: 'rgba(52, 152, 219, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Customers'
                            }
                        }
                    }
                }
            });

            // Cuisine Search
            const cuisines = ["Indian", "Chinese", "Italian", "Mexican", "Thai", "Japanese", "Korean", "Mediterranean", "French", "American"];
            $('#cuisineSearch').on('input', function () {
                let val = $(this).val().toLowerCase();
                if (val.length > 0) {
                    let filtered = cuisines.filter(c => c.toLowerCase().includes(val));
                    $('#cuisineList').empty();
                    filtered.forEach(c => {
                        $('#cuisineList').append(`<li class="list-group-item">${c}</li>`);
                    });
                } else {
                    $('#cuisineList').empty();
                }
            });

            // Make list items clickable
            $(document).on('click', '#cuisineList li', function() {
                $('#cuisineSearch').val($(this).text());
                $('#cuisineList').empty();
            });

            // Hide list when clicking outside
            $(document).on('click', function(e) {
                if (!$(e.target).closest('.cuisine-search').length) {
                    $('#cuisineList').empty();
                }
            });
            
            // Initialize Menu Items Modal functionality
            $('#menuItemsBtn').click(function() {
                loadMenuItems();
                var menuModal = new bootstrap.Modal(document.getElementById('menuItemsModal'));
                menuModal.show();
                
                // Reset estimation section
                $('.estimation-section').hide();
                $('#printEstimateBtn').hide();
                $('#clearEstimateBtn').hide();
                $('#estimationTableBody').empty();
            });
            
            // Menu Items search functionality
            $('#menuItemSearch').on('keyup', function() {
                var searchText = $(this).val().toLowerCase();
                $('#menuItemsTable tbody tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(searchText) > -1);
                });
            });
            
            // Category filter functionality
            $('#categoryFilter').on('change', function() {
                var category = $(this).val().toLowerCase();
                if (category === 'all') {
                    $('#menuItemsTable tbody tr').show();
                } else {
                    $('#menuItemsTable tbody tr').filter(function() {
                        $(this).toggle($(this).find('td:eq(2)').text().toLowerCase() === category);
                    });
                }
            });
            
            // Estimate button functionality
            $('#estimateBtn').on('click', function() {
                generateEstimate();
            });
            
            // Print estimate button functionality
            $('#printEstimateBtn').on('click', function() {
                printEstimate();
            });
            
            // Clear estimate button functionality
            $('#clearEstimateBtn').on('click', function() {
                clearEstimate();
            });
            
            // Watch for quantity input changes
            $(document).on('change', '.qty-input', function() {
                var value = parseInt($(this).val());
                if (isNaN(value) || value < 0) {
                    $(this).val(0);
                }
            });
            
            function loadMenuItems() {
                // Show loading indicator
                $('#menuItemsTableBody').html('<tr><td colspan="4" class="text-center">Loading menu items...</td></tr>');
                
                // Fetch menu items from API
                $.ajax({
                    url: '/Menu/Index',
                    method: 'GET',
                    success: function(data) {
                        // Extract menu items from the response
                        var menuItems = $(data).find('.table tbody tr');
                        var tableBody = $('#menuItemsTableBody');
                        
                        if (menuItems.length > 0) {
                            tableBody.empty();
                            
                            // Process and add menu items to modal table
                            menuItems.each(function() {
                                var pluCode = $(this).find('td:eq(0)').text().trim();
                                var name = $(this).find('td:eq(2)').text().trim();
                                var category = $(this).find('td:eq(3)').text().trim();
                                var price = $(this).find('td:eq(4)').text().trim();
                                
                                // Extract numeric price value
                                var numericPrice = price.replace(/[^\d.]/g, ''); // Remove all non-numeric characters except decimal
                                
                                tableBody.append(`
                                    <tr data-price="${numericPrice}">
                                        <td>${name}</td>
                                        <td>${price}</td>
                                        <td>${category}</td>
                                        <td>${pluCode}</td>
                                        <td>
                                            <input type="number" class="form-control form-control-sm qty-input" min="0" value="0" step="1">
                                        </td>
                                    </tr>
                                `);
                                
                                // Add category to filter if not already present
                                if ($('#categoryFilter option[value="' + category.toLowerCase() + '"]').length === 0) {
                                    $('#categoryFilter').append(`<option value="${category.toLowerCase()}">${category}</option>`);
                                }
                            });
                        } else {
                            tableBody.html('<tr><td colspan="4" class="text-center">No menu items found</td></tr>');
                        }
                    },
                    error: function() {
                        $('#menuItemsTableBody').html('<tr><td colspan="4" class="text-center text-danger">Error loading menu items</td></tr>');
                    }
                });
            }
            // Function to generate estimate
            function generateEstimate() {
                var selectedItems = [];
                var total = 0;
                var hasSelectedItems = false;
                
                // Collect all items with quantity > 0
                $('#menuItemsTable tbody tr').each(function() {
                    var qtyInput = $(this).find('.qty-input');
                    var qty = parseInt(qtyInput.val());
                    
                    if (qty > 0) {
                        var name = $(this).find('td:eq(0)').text().trim();
                        var priceText = $(this).find('td:eq(1)').text().trim();
                        var dataPrice = $(this).data('price');
                        
                        // Use data-price attribute if available, otherwise parse the text
                        var price = parseFloat(dataPrice) || parseFloat(priceText.replace(/[^\d.]/g, ''));
                        
                        if (!isNaN(price) && price > 0) {
                            var subtotal = qty * price;
                            
                            selectedItems.push({
                                name: name,
                                price: price,
                                qty: qty,
                                subtotal: subtotal
                            });
                            
                            total += subtotal;
                            hasSelectedItems = true;
                        }
                    }
                });
                
                // Update estimation table
                var estimationBody = $('#estimationTableBody');
                estimationBody.empty();
                
                if (hasSelectedItems) {
                    selectedItems.forEach(function(item) {
                        estimationBody.append(`
                            <tr>
                                <td class="fw-bold">${item.name}</td>
                                <td>₹${item.price.toFixed(2)}</td>
                                <td class="text-center">${item.qty}</td>
                                <td class="fw-bold">₹${item.subtotal.toFixed(2)}</td>
                            </tr>
                        `);
                    });
                    
                    // Add tax calculation (assuming 5% GST)
                    var tax = total * 0.05;
                    var grandTotal = total + tax;
                    
                    // Add tax and total rows
                    estimationBody.append(`
                        <tr class="border-top">
                            <td colspan="3" class="text-end fw-bold">Subtotal:</td>
                            <td class="fw-bold">₹${total.toFixed(2)}</td>
                        </tr>
                        <tr>
                            <td colspan="3" class="text-end">GST (5%):</td>
                            <td>₹${tax.toFixed(2)}</td>
                        </tr>
                        <tr class="table-success">
                            <td colspan="3" class="text-end fw-bold fs-5">Grand Total:</td>
                            <td class="fw-bold fs-5">₹${grandTotal.toFixed(2)}</td>
                        </tr>
                    `);
                    
                    // Show estimation section and buttons
                    $('.estimation-section').show();
                    $('#printEstimateBtn').show();
                    $('#clearEstimateBtn').show();
                    
                    // Success message
                    showToast('Estimate generated successfully!', 'success');
                } else {
                    // No items selected
                    estimationBody.append(`
                        <tr>
                            <td colspan="4" class="text-center text-muted py-4">
                                <i class="fas fa-shopping-cart me-2"></i>
                                Please select items and quantities to generate an estimate
                            </td>
                        </tr>
                    `);
                    $('.estimation-section').show();
                    $('#printEstimateBtn').hide();
                    $('#clearEstimateBtn').hide();
                    
                    // Warning message
                    showToast('Please select items and enter quantities to generate estimate', 'warning');
                }
            }
            
            // Function to print estimate
            function printEstimate() {
                var currentDate = new Date();
                var estimateNumber = 'EST-' + currentDate.getFullYear() + (currentDate.getMonth() + 1).toString().padStart(2, '0') + currentDate.getDate().toString().padStart(2, '0') + '-' + Math.floor(Math.random() * 1000);
                
                var printContents = `
                    <html>
                    <head>
                        <title>Order Estimate - ${estimateNumber}</title>
                        <style>
                            body { 
                                font-family: Arial, sans-serif; 
                                margin: 20px;
                                line-height: 1.4;
                            }
                            .header { 
                                text-align: center; 
                                margin-bottom: 30px;
                                border-bottom: 2px solid #007bff;
                                padding-bottom: 15px;
                            }
                            .company-name {
                                font-size: 24px;
                                font-weight: bold;
                                color: #007bff;
                                margin-bottom: 5px;
                            }
                            .estimate-title {
                                font-size: 18px;
                                color: #333;
                                margin-bottom: 10px;
                            }
                            .estimate-info {
                                display: flex;
                                justify-content: space-between;
                                margin-bottom: 20px;
                                font-size: 14px;
                            }
                            table { 
                                width: 100%; 
                                border-collapse: collapse;
                                margin-bottom: 20px;
                            }
                            th, td { 
                                border: 1px solid #ddd; 
                                padding: 12px 8px; 
                                text-align: left; 
                            }
                            th { 
                                background-color: #f8f9fa;
                                font-weight: bold;
                                color: #333;
                            }
                            .text-right { text-align: right; }
                            .text-center { text-align: center; }
                            .total-row { 
                                background-color: #e8f5e8;
                                font-weight: bold;
                            }
                            .footer { 
                                margin-top: 30px; 
                                text-align: center; 
                                font-style: italic;
                                color: #666;
                                border-top: 1px solid #ddd;
                                padding-top: 15px;
                            }
                            .terms {
                                margin-top: 20px;
                                font-size: 12px;
                                color: #666;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <div class="company-name">Restaurant Management System</div>
                            <div class="estimate-title">ORDER ESTIMATE</div>
                        </div>
                        
                        <div class="estimate-info">
                            <div>
                                <strong>Estimate #:</strong> ${estimateNumber}<br>
                                <strong>Date:</strong> ${currentDate.toLocaleDateString('en-IN')}<br>
                                <strong>Time:</strong> ${currentDate.toLocaleTimeString('en-IN')}
                            </div>
                            <div>
                                <strong>Valid Until:</strong> ${new Date(currentDate.getTime() + 7*24*60*60*1000).toLocaleDateString('en-IN')}<br>
                                <strong>Prepared By:</strong> System User
                            </div>
                        </div>
                        
                        <table>
                            <thead>
                                <tr>
                                    <th style="width: 50%;">Item Description</th>
                                    <th style="width: 15%;" class="text-right">Unit Price</th>
                                    <th style="width: 10%;" class="text-center">Qty</th>
                                    <th style="width: 15%;" class="text-right">Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                `;
                
                // Add all rows from the estimation table
                $('#estimationTableBody tr').each(function() {
                    if ($(this).find('td').length === 4) {
                        var cells = $(this).find('td');
                        var isTotal = $(this).hasClass('table-success') || $(this).find('td:first').text().includes('Grand Total');
                        var rowClass = isTotal ? 'total-row' : '';
                        
                        printContents += `<tr class="${rowClass}">`;
                        cells.each(function(index) {
                            var cellClass = '';
                            if (index === 1 || index === 3) cellClass = 'text-right';
                            if (index === 2) cellClass = 'text-center';
                            
                            printContents += `<td class="${cellClass}">${$(this).text()}</td>`;
                        });
                        printContents += '</tr>';
                    }
                });
                
                printContents += `
                            </tbody>
                        </table>
                        
                        <div class="terms">
                            <strong>Terms & Conditions:</strong><br>
                            1. This is an estimate only. Final prices may vary.<br>
                            2. Prices are subject to change without notice.<br>
                            3. All prices include applicable taxes.<br>
                            4. This estimate is valid for 7 days from the date of issue.
                        </div>
                        
                        <div class="footer">
                            <p><strong>Thank you for choosing our restaurant!</strong></p>
                            <p>For any queries, please contact our management team.</p>
                        </div>
                    </body>
                    </html>
                `;
                
                // Create a new window for printing
                var printWindow = window.open('', '_blank', 'width=800,height=600');
                printWindow.document.write(printContents);
                printWindow.document.close();
                printWindow.focus();
                
                // Print after a short delay to ensure content is loaded
                setTimeout(function() {
                    printWindow.print();
                    // Don't automatically close - let user close manually
                }, 500);
                
                showToast('Estimate prepared for printing', 'success');
            }
            
            // Function to clear estimate
            function clearEstimate() {
                // Reset all quantity inputs to 0
                $('.qty-input').val(0);
                
                // Clear estimation table
                $('#estimationTableBody').empty();
                
                // Hide estimation section and buttons
                $('.estimation-section').hide();
                $('#printEstimateBtn').hide();
                $('#clearEstimateBtn').hide();
                
                showToast('Estimate cleared successfully', 'info');
            }
            
            // Toast notification function
            function showToast(message, type = 'info') {
                // Remove existing toasts
                $('.toast-notification').remove();
                
                var bgClass = 'bg-info';
                var icon = 'fa-info-circle';
                
                switch(type) {
                    case 'success':
                        bgClass = 'bg-success';
                        icon = 'fa-check-circle';
                        break;
                    case 'warning':
                        bgClass = 'bg-warning';
                        icon = 'fa-exclamation-triangle';
                        break;
                    case 'error':
                        bgClass = 'bg-danger';
                        icon = 'fa-times-circle';
                        break;
                }
                
                var toast = $(`
                    <div class="toast-notification position-fixed top-0 end-0 m-3 ${bgClass} text-white p-3 rounded shadow" style="z-index: 9999;">
                        <i class="fas ${icon} me-2"></i>${message}
                    </div>
                `);
                
                $('body').append(toast);
                
                // Auto-hide after 3 seconds
                setTimeout(function() {
                    toast.fadeOut(300, function() {
                        $(this).remove();
                    });
                }, 3000);
            }
        });
    </script>
    
    <!-- Menu Items Modal -->
    <div class="modal fade" id="menuItemsModal" tabindex="-1" role="dialog" aria-labelledby="menuItemsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="menuItemsModalLabel">Menu Items & Estimation</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <input type="text" id="menuItemSearch" class="form-control" placeholder="Search menu items...">
                        </div>
                        <div class="col-md-4">
                            <select id="categoryFilter" class="form-control">
                                <option value="all">All Categories</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button id="estimateBtn" class="btn btn-success w-100">Estimate</button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="menuItemsTable" class="table table-striped table-hover">
                            <thead class="thead-light">
                                <tr>
                                    <th width="45%">Name</th>
                                    <th width="15%">Price</th>
                                    <th width="15%">Category</th>
                                    <th width="15%">PLU Code</th>
                                    <th width="10%">Qty</th>
                                </tr>
                            </thead>
                            <tbody id="menuItemsTableBody">
                                <tr>
                                    <td colspan="5" class="text-center">Click "Menu Items" to load data</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="estimation-section p-3 border-top bg-light" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="mb-0 text-primary">
                            <i class="fas fa-calculator me-2"></i>Order Estimation
                        </h5>
                        <small class="text-muted">All prices include GST</small>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-sm table-striped" id="estimationTable">
                            <thead class="table-primary">
                                <tr>
                                    <th width="45%">Item Description</th>
                                    <th width="20%" class="text-end">Unit Price</th>
                                    <th width="15%" class="text-center">Qty</th>
                                    <th width="20%" class="text-end">Amount</th>
                                </tr>
                            </thead>
                            <tbody id="estimationTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="d-flex w-100 justify-content-between">
                        <div>
                            <button type="button" id="clearEstimateBtn" class="btn btn-warning me-2" style="display: none;">
                                <i class="fas fa-eraser"></i> Clear
                            </button>
                            <button type="button" id="printEstimateBtn" class="btn btn-info" style="display: none;">
                                <i class="fas fa-print"></i> Print Estimate
                            </button>
                        </div>
                        <div>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
