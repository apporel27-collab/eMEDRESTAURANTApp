using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.Extensions.Configuration;
using RestaurantManagementSystem.Models;
using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace RestaurantManagementSystem.Controllers
{
    public class OrderController : Controller
    {
        private readonly IConfiguration _configuration;
        private readonly string _connectionString;
        
        public OrderController(IConfiguration configuration)
        {
            _configuration = configuration;
            _connectionString = _configuration.GetConnectionString("DefaultConnection");
        }
        
        // Order Dashboard
        public IActionResult Dashboard()
        {
            var model = GetOrderDashboard();
            return View(model);
        }
        
        // Create New Order
        public IActionResult Create()
        {
            var model = new CreateOrderViewModel();
            
            // Get available tables
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get available tables
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, TableName, Capacity, Status
                    FROM Tables
                    WHERE Status = 0
                    ORDER BY TableName", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.AvailableTables.Add(new TableViewModel
                            {
                                Id = reader.GetInt32(0),
                                TableName = reader.GetString(1),
                                Capacity = reader.GetInt32(2),
                                Status = reader.GetInt32(3),
                                StatusDisplay = "Available"
                            });
                        }
                    }
                }
                
                // Get occupied tables with turnover info
                using (SqlCommand command = new SqlCommand(@"
                    SELECT tt.Id, t.Id, t.TableName, tt.GuestName, tt.PartySize, tt.Status
                    FROM TableTurnovers tt
                    INNER JOIN Tables t ON tt.TableId = t.Id
                    WHERE tt.Status < 5 -- Not departed
                    ORDER BY t.TableName", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.OccupiedTables.Add(new ActiveTableViewModel
                            {
                                TurnoverId = reader.GetInt32(0),
                                TableId = reader.GetInt32(1),
                                TableName = reader.GetString(2),
                                GuestName = reader.GetString(3),
                                PartySize = reader.GetInt32(4),
                                Status = reader.GetInt32(5)
                            });
                        }
                    }
                }
            }
            
            return View(model);
        }
        
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(CreateOrderViewModel model)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    using (SqlConnection connection = new SqlConnection(_connectionString))
                    {
                        connection.Open();
                        
                        using (SqlCommand command = new SqlCommand("usp_CreateOrder", connection))
                        {
                            command.CommandType = CommandType.StoredProcedure;
                            
                            command.Parameters.AddWithValue("@TableTurnoverId", model.TableTurnoverId ?? (object)DBNull.Value);
                            command.Parameters.AddWithValue("@OrderType", model.OrderType);
                            command.Parameters.AddWithValue("@UserId", GetCurrentUserId());
                            command.Parameters.AddWithValue("@CustomerName", string.IsNullOrEmpty(model.CustomerName) ? (object)DBNull.Value : model.CustomerName);
                            command.Parameters.AddWithValue("@CustomerPhone", string.IsNullOrEmpty(model.CustomerPhone) ? (object)DBNull.Value : model.CustomerPhone);
                            command.Parameters.AddWithValue("@SpecialInstructions", string.IsNullOrEmpty(model.SpecialInstructions) ? (object)DBNull.Value : model.SpecialInstructions);
                            
                            using (SqlDataReader reader = command.ExecuteReader())
                            {
                                int orderId = 0;
                                string orderNumber = "";
                                string message = "Failed to create order.";
                                
                                if (reader.Read())
                                {
                                    orderId = reader.GetInt32(0);
                                    orderNumber = reader.GetString(1);
                                    message = reader.GetString(2);
                                }
                                
                                // Close the reader before executing another command on the same connection
                                reader.Close();
                                
                                if (orderId > 0)
                                {
                                    // Create kitchen tickets for the new order if it has items
                                    using (SqlCommand kitchenCommand = new SqlCommand("UpdateKitchenTicketsForOrder", connection))
                                    {
                                        kitchenCommand.CommandType = CommandType.StoredProcedure;
                                        kitchenCommand.Parameters.AddWithValue("@OrderId", orderId);
                                        kitchenCommand.ExecuteNonQuery();
                                    }
                                    
                                    TempData["SuccessMessage"] = $"Order {orderNumber} created successfully.";
                                    return RedirectToAction("Details", new { id = orderId });
                                }
                                else
                                {
                                    ModelState.AddModelError("", message);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("", $"An error occurred: {ex.Message}");
                }
            }
            
            // If we get here, something went wrong - repopulate the model
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get available tables
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, TableName, Capacity, Status
                    FROM Tables
                    WHERE Status = 0
                    ORDER BY TableName", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.AvailableTables.Add(new TableViewModel
                            {
                                Id = reader.GetInt32(0),
                                TableName = reader.GetString(1),
                                Capacity = reader.GetInt32(2),
                                Status = reader.GetInt32(3),
                                StatusDisplay = "Available"
                            });
                        }
                    }
                }
                
                // Get occupied tables with turnover info
                using (SqlCommand command = new SqlCommand(@"
                    SELECT tt.Id, t.Id, t.TableName, tt.GuestName, tt.PartySize, tt.Status
                    FROM TableTurnovers tt
                    INNER JOIN Tables t ON tt.TableId = t.Id
                    WHERE tt.Status < 5 -- Not departed
                    ORDER BY t.TableName", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.OccupiedTables.Add(new ActiveTableViewModel
                            {
                                TurnoverId = reader.GetInt32(0),
                                TableId = reader.GetInt32(1),
                                TableName = reader.GetString(2),
                                GuestName = reader.GetString(3),
                                PartySize = reader.GetInt32(4),
                                Status = reader.GetInt32(5)
                            });
                        }
                    }
                }
            }
            
            return View(model);
        }
        
        // Order Details
        public IActionResult Details(int id)
        {
            var model = GetOrderDetails(id);
            
            if (model == null)
            {
                return NotFound();
            }
            
            return View(model);
        }
        
        // Add Item to Order
        public IActionResult AddItem(int orderId, int? menuItemId = null)
        {
            var model = new AddOrderItemViewModel
            {
                OrderId = orderId
            };
            
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get order details
                using (SqlCommand command = new SqlCommand(@"
                    SELECT o.OrderNumber, ISNULL(t.TableName, 'N/A') AS TableNumber
                    FROM Orders o
                    LEFT JOIN TableTurnovers tt ON o.TableTurnoverId = tt.Id
                    LEFT JOIN Tables t ON tt.TableId = t.Id
                    WHERE o.Id = @OrderId", connection))
                {
                    command.Parameters.AddWithValue("@OrderId", orderId);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            model.OrderNumber = reader.GetString(0);
                            model.TableNumber = reader.GetString(1);
                        }
                        else
                        {
                            return NotFound();
                        }
                    }
                }
                
                // Get available courses
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, Name
                    FROM CourseTypes
                    ORDER BY DisplayOrder", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.AvailableCourses.Add(new SelectListItem
                            {
                                Value = reader.GetInt32(0).ToString(),
                                Text = reader.GetString(1)
                            });
                        }
                    }
                }
                
                // Get current order items for the order summary
                using (SqlCommand command = new SqlCommand(@"
                    SELECT oi.Id, oi.MenuItemId, oi.Quantity, oi.UnitPrice, oi.Subtotal, 
                           oi.SpecialInstructions, mi.Name
                    FROM OrderItems oi
                    INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                    WHERE oi.OrderId = @OrderId AND oi.Status < 5 -- Not cancelled
                    ORDER BY oi.CreatedAt DESC", connection))
                {
                    command.Parameters.AddWithValue("@OrderId", orderId);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.CurrentOrderItems.Add(new OrderItemViewModel
                            {
                                Id = reader.GetInt32(0),
                                MenuItemId = reader.GetInt32(1),
                                Quantity = reader.GetInt32(2),
                                UnitPrice = reader.GetDecimal(3),
                                Subtotal = reader.GetDecimal(4),
                                SpecialInstructions = reader.IsDBNull(5) ? null : reader.GetString(5),
                                MenuItemName = reader.GetString(6),
                                TotalPrice = reader.GetDecimal(4) // Subtotal already includes quantity
                            });
                        }
                    }
                }
                
                // Calculate current order total
                model.CurrentOrderTotal = model.CurrentOrderItems.Sum(i => i.Subtotal);
                
                // If a specific menu item is selected, get its details and modifiers
                if (menuItemId.HasValue)
                {
                    model.MenuItemId = menuItemId.Value;
                    
                    // Get menu item details
                    using (SqlCommand command = new SqlCommand(@"
                        SELECT Id, Name, Description, Price, CategoryId, ImagePath
                        FROM MenuItems
                        WHERE Id = @MenuItemId AND IsAvailable = 1", connection))
                    {
                        command.Parameters.AddWithValue("@MenuItemId", menuItemId.Value);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                model.MenuItem = new MenuItem
                                {
                                    Id = reader.GetInt32(0),
                                    Name = reader.GetString(1),
                                    Description = reader.IsDBNull(2) ? null : reader.GetString(2),
                                    Price = reader.GetDecimal(3),
                                    CategoryId = reader.GetInt32(4),
                                    ImagePath = reader.IsDBNull(5) ? null : reader.GetString(5)
                                };
                                
                                // Set properties for the view
                                model.MenuItemName = model.MenuItem.Name;
                                model.MenuItemDescription = model.MenuItem.Description;
                                model.MenuItemPrice = model.MenuItem.Price;
                                model.MenuItemImagePath = model.MenuItem.ImagePath;
                            }
                            else
                            {
                                return NotFound();
                            }
                        }
                    }
                    
                    // Get available modifiers for the menu item
                    // Check if either table version exists
                    bool tableExists = false;
                    string modifiersTableName = "";
                    string modifiersQuery;
                    
                    try
                    {
                        using (SqlConnection checkCon = new SqlConnection(_connectionString))
                        {
                            checkCon.Open();
                            
                            // Try with underscore first
                            using (SqlCommand cmd = new SqlCommand("SELECT CASE WHEN OBJECT_ID('MenuItem_Modifiers', 'U') IS NOT NULL THEN 1 ELSE 0 END", checkCon))
                            {
                                if (Convert.ToBoolean(cmd.ExecuteScalar()))
                                {
                                    tableExists = true;
                                    modifiersTableName = "MenuItem_Modifiers";
                                }
                            }
                            
                            // If not found, try without underscore
                            if (!tableExists)
                            {
                                using (SqlCommand cmd = new SqlCommand("SELECT CASE WHEN OBJECT_ID('MenuItemModifiers', 'U') IS NOT NULL THEN 1 ELSE 0 END", checkCon))
                                {
                                    if (Convert.ToBoolean(cmd.ExecuteScalar()))
                                    {
                                        tableExists = true;
                                        modifiersTableName = "MenuItemModifiers";
                                    }
                                }
                            }
                        }
                    
                        if (tableExists)
                        {
                            // Check if the table has PriceAdjustment and IsDefault columns
                            bool hasPriceAdjustment = ColumnExistsInTable(modifiersTableName, "PriceAdjustment");
                            bool hasIsDefault = ColumnExistsInTable(modifiersTableName, "IsDefault");
                            
                            // Build the query based on the available columns
                            if (hasPriceAdjustment && hasIsDefault)
                            {
                                modifiersQuery = $@"
                                    SELECT m.Id, m.Name, mm.PriceAdjustment AS Price, mm.IsDefault
                                    FROM Modifiers m
                                    INNER JOIN {modifiersTableName} mm ON m.Id = mm.ModifierId
                                    WHERE mm.MenuItemId = @MenuItemId
                                    ORDER BY m.Name";
                            }
                            else
                            {
                                modifiersQuery = $@"
                                    SELECT m.Id, m.Name, 0 AS Price, 0 AS IsDefault
                                    FROM Modifiers m
                                    INNER JOIN {modifiersTableName} mm ON m.Id = mm.ModifierId
                                    WHERE mm.MenuItemId = @MenuItemId
                                    ORDER BY m.Name";
                            }
                        }
                        else
                        {
                            // If no table exists, just get modifiers without relationship
                            modifiersQuery = @"
                                SELECT m.Id, m.Name, 0 AS Price, 0 AS IsDefault
                                FROM Modifiers m
                                ORDER BY m.Name";
                        }
                    }
                    catch (Exception ex)
                    {
                        // Log the error if possible
                        Console.WriteLine($"Error checking modifiers table: {ex.Message}");
                        
                        // Fallback to a simple query that doesn't require the relationship table
                        modifiersQuery = @"
                            SELECT m.Id, m.Name, 0 AS Price, 0 AS IsDefault
                            FROM Modifiers m
                            ORDER BY m.Name";
                    }
                        
                    using (SqlCommand command = new SqlCommand(modifiersQuery, connection))
                    {
                        command.Parameters.AddWithValue("@MenuItemId", menuItemId.Value);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var modifier = new ModifierViewModel
                                {
                                    Id = reader.GetInt32(0),
                                    Name = reader.GetString(1),
                                    Price = reader.GetDecimal(2),
                                    IsDefault = reader.GetBoolean(3),
                                    IsSelected = false, // Changed to false by default
                                    ModifierId = reader.GetInt32(0)
                                };
                                
                                model.AvailableModifiers.Add(modifier);
                                
                                if (modifier.IsDefault)
                                {
                                    model.SelectedModifiers.Add(modifier.Id);
                                }
                            }
                        }
                    }
                    
                    // Get allergens for the menu item
                    string allergensTableName = GetMenuItemRelationshipTableName("Allergens");
                    string allergensQuery = $@"
                        SELECT a.Name
                        FROM Allergens a
                        INNER JOIN {allergensTableName} ma ON a.Id = ma.AllergenId
                        WHERE ma.MenuItemId = @MenuItemId
                        ORDER BY a.Name";
                        
                    using (SqlCommand command = new SqlCommand(allergensQuery, connection))
                    {
                        command.Parameters.AddWithValue("@MenuItemId", menuItemId.Value);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                model.CommonAllergens.Add(reader.GetString(0));
                            }
                        }
                    }
                }
            }
            
            return View(model);
        }
        
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AddItem(AddOrderItemViewModel model)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    using (SqlConnection connection = new SqlConnection(_connectionString))
                    {
                        connection.Open();
                        
                        // Convert selected modifiers to comma-separated string
                        string modifierIds = model.SelectedModifiers != null && model.SelectedModifiers.Any()
                            ? string.Join(",", model.SelectedModifiers)
                            : null;
                        
                        using (SqlCommand command = new SqlCommand("usp_AddOrderItem", connection))
                        {
                            command.CommandType = CommandType.StoredProcedure;
                            
                            command.Parameters.AddWithValue("@OrderId", model.OrderId);
                            command.Parameters.AddWithValue("@MenuItemId", model.MenuItemId);
                            command.Parameters.AddWithValue("@Quantity", model.Quantity);
                            command.Parameters.AddWithValue("@SpecialInstructions", string.IsNullOrEmpty(model.SpecialInstructions) ? (object)DBNull.Value : model.SpecialInstructions);
                            command.Parameters.AddWithValue("@CourseId", model.CourseId.HasValue ? model.CourseId.Value : (object)DBNull.Value);
                            command.Parameters.AddWithValue("@ModifierIds", modifierIds ?? (object)DBNull.Value);
                            
                            using (SqlDataReader reader = command.ExecuteReader())
                            {
                                if (reader.Read())
                                {
                                    int orderItemId = reader.GetInt32(0);
                                    string message = reader.GetString(1);
                                    
                                    if (orderItemId > 0)
                                    {
                                        // Create or update kitchen ticket after adding an item
                                        using (SqlCommand kitchenCommand = new SqlCommand("UpdateKitchenTicketsForOrder", connection))
                                        {
                                            kitchenCommand.CommandType = CommandType.StoredProcedure;
                                            kitchenCommand.Parameters.AddWithValue("@OrderId", model.OrderId);
                                            kitchenCommand.ExecuteNonQuery();
                                        }
                                        
                                        TempData["SuccessMessage"] = "Item added to order successfully.";
                                        return RedirectToAction("Details", new { id = model.OrderId });
                                    }
                                    else
                                    {
                                        ModelState.AddModelError("", message);
                                    }
                                }
                                else
                                {
                                    ModelState.AddModelError("", "Failed to add item to order.");
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("", $"An error occurred: {ex.Message}");
                }
            }
            
            // If we get here, something went wrong - repopulate the model
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get available courses
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, Name
                    FROM CourseTypes
                    ORDER BY DisplayOrder", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.AvailableCourses.Add(new SelectListItem
                            {
                                Value = reader.GetInt32(0).ToString(),
                                Text = reader.GetString(1)
                            });
                        }
                    }
                }
                
                // Get menu item details
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, Name, Description, Price, CategoryId
                    FROM MenuItems
                    WHERE Id = @MenuItemId AND IsAvailable = 1", connection))
                {
                    command.Parameters.AddWithValue("@MenuItemId", model.MenuItemId);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            model.MenuItem = new MenuItem
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Description = reader.IsDBNull(2) ? null : reader.GetString(2),
                                Price = reader.GetDecimal(3),
                                CategoryId = reader.GetInt32(4)
                            };
                        }
                    }
                }
                
                // Get available modifiers for the menu item
                using (SqlCommand command = new SqlCommand(@"
                    SELECT m.Id, m.Name, m.Price, m.IsDefault
                    FROM Modifiers m
                    INNER JOIN MenuItem_Modifiers mm ON m.Id = mm.ModifierId
                    WHERE mm.MenuItemId = @MenuItemId
                    ORDER BY m.Name", connection))
                {
                    command.Parameters.AddWithValue("@MenuItemId", model.MenuItemId);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.AvailableModifiers.Add(new ModifierViewModel
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Price = reader.GetDecimal(2),
                                IsDefault = reader.GetBoolean(3),
                                IsSelected = model.SelectedModifiers?.Contains(reader.GetInt32(0)) ?? false
                            });
                        }
                    }
                }
            }
            
            return View(model);
        }
        
        // Fire Items to Kitchen
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult FireItems(FireOrderItemsViewModel model)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    using (SqlConnection connection = new SqlConnection(_connectionString))
                    {
                        connection.Open();
                        
                        // Convert selected items to comma-separated string
                        string orderItemIds = null;
                        
                        if (!model.FireAll && model.SelectedItems != null && model.SelectedItems.Any())
                        {
                            orderItemIds = string.Join(",", model.SelectedItems);
                        }

                        // Check if KitchenTicketItems table exists with or without underscore
                        bool useUnderscoreVersion = false;
                        string kitchenTicketItemsTableName = "KitchenTicketItems";
                        
                        if (TableExists("Kitchen_TicketItems"))
                        {
                            kitchenTicketItemsTableName = "Kitchen_TicketItems";
                            useUnderscoreVersion = true;
                        }
                        
                        // First, let's create the kitchen ticket
                        // We'll use our own SQL instead of calling the stored procedure directly
                        // to handle table name differences
                        string ticketNumber = null;
                        int kitchenTicketId = 0;
                        
                        try
                        {
                            // Start a transaction
                            using (SqlTransaction transaction = connection.BeginTransaction())
                            {
                                try
                                {
                                    // Debug message to track execution
                                    Console.WriteLine("Starting FireItems transaction...");
                                    
                                    // Generate unique ticket number
                                    string ticketNumberSql = @"
                                        SELECT 'KOT-' + CONVERT(NVARCHAR(8), GETDATE(), 112) + '-' + 
                                        RIGHT('0000' + CAST((SELECT ISNULL(MAX(CAST(RIGHT(TicketNumber, 4) AS INT)), 0) + 1 
                                                            FROM KitchenTickets 
                                                            WHERE LEFT(TicketNumber, 12) = 'KOT-' + CONVERT(NVARCHAR(8), GETDATE(), 112)) AS NVARCHAR(4)), 4)
                                    ";
                                    
                                    Console.WriteLine("Generating ticket number with SQL: " + ticketNumberSql);
                                    
                                    using (SqlCommand cmd = new SqlCommand(ticketNumberSql, connection, transaction))
                                    {
                                        ticketNumber = (string)cmd.ExecuteScalar();
                                        Console.WriteLine($"Generated ticket number: {ticketNumber}");
                                    }
                                    
                                    // First check the structure of KitchenTickets table
                                    Console.WriteLine("Checking KitchenTickets table structure...");
                                    
                                    // Query to get the exact schema for the table
                                    string schemaQuery = @"
                                        SELECT c.name AS ColumnName 
                                        FROM sys.columns c
                                        JOIN sys.tables t ON c.object_id = t.object_id
                                        WHERE t.name = 'KitchenTickets' AND t.type = 'U'";
                                        
                                    List<string> kitchenTicketColumns = new List<string>();
                                    using (SqlCommand cmd = new SqlCommand(schemaQuery, connection, transaction))
                                    {
                                        using (SqlDataReader reader = cmd.ExecuteReader())
                                        {
                                            while (reader.Read())
                                            {
                                                string columnName = reader.GetString(0);
                                                kitchenTicketColumns.Add(columnName);
                                                Console.WriteLine($"Found column: {columnName}");
                                            }
                                        }
                                    }
                                    
                                    // Check if UpdatedAt column exists
                                    bool hasKitchenTicketUpdatedAtColumn = kitchenTicketColumns.Contains("UpdatedAt");
                                    Console.WriteLine($"Has UpdatedAt column: {hasKitchenTicketUpdatedAtColumn}");
                                    
                                    // We need to get the order number first
                                    string orderNumber = null;
                                    using (SqlCommand cmd = new SqlCommand(@"
                                        SELECT OrderNumber FROM Orders WHERE Id = @OrderId
                                    ", connection, transaction))
                                    {
                                        cmd.Parameters.AddWithValue("@OrderId", model.OrderId);
                                        object result = cmd.ExecuteScalar();
                                        if (result != null)
                                        {
                                            orderNumber = result.ToString();
                                            Console.WriteLine($"Retrieved order number: {orderNumber}");
                                        }
                                        else
                                        {
                                            Console.WriteLine("Could not retrieve order number!");
                                            throw new Exception("Order number is required but could not be retrieved");
                                        }
                                    }
                                    
                                    // Now include the OrderNumber in our insert
                                    string insertKitchenTicketSql = @"
                                        INSERT INTO [KitchenTickets] (
                                            [TicketNumber],
                                            [OrderId],
                                            [OrderNumber],
                                            [Status],
                                            [CreatedAt]
                                        ) VALUES (
                                            @TicketNumber,
                                            @OrderId,
                                            @OrderNumber,
                                            0,
                                            GETDATE()
                                        );
                                        SELECT SCOPE_IDENTITY();";
                                    
                                    Console.WriteLine("Using SQL: " + insertKitchenTicketSql);
                                    
                                    // Create kitchen ticket
                                    using (SqlCommand cmd = new SqlCommand(insertKitchenTicketSql, connection, transaction))
                                    {
                                        cmd.Parameters.AddWithValue("@TicketNumber", ticketNumber);
                                        cmd.Parameters.AddWithValue("@OrderId", model.OrderId);
                                        cmd.Parameters.AddWithValue("@OrderNumber", orderNumber);
                                        kitchenTicketId = Convert.ToInt32(cmd.ExecuteScalar());
                                        Console.WriteLine($"Created kitchen ticket with ID: {kitchenTicketId}");
                                    }
                                    
                                    // Update order items and add them to kitchen ticket items
                                    if (!model.FireAll && model.SelectedItems != null && model.SelectedItems.Any())
                                    {
                                        // Update selected order items
                                        foreach (int itemId in model.SelectedItems)
                                        {
                                            // Check if OrderItems table has UpdatedAt column
                                            bool hasItemUpdatedAtColumn = ColumnExistsInTable("OrderItems", "UpdatedAt");
                                            
                                            // Build SQL based on column existence
                                            string updateItemSql = hasItemUpdatedAtColumn
                                                ? @"UPDATE [OrderItems]
                                                    SET [Status] = 1,
                                                        [FireTime] = GETDATE(),
                                                        [UpdatedAt] = GETDATE()
                                                    WHERE [Id] = @ItemId AND [OrderId] = @OrderId AND [Status] = 0;"
                                                : @"UPDATE [OrderItems]
                                                    SET [Status] = 1,
                                                        [FireTime] = GETDATE()
                                                    WHERE [Id] = @ItemId AND [OrderId] = @OrderId AND [Status] = 0;";
                                            
                                            using (SqlCommand cmd = new SqlCommand(updateItemSql, connection, transaction))
                                            {
                                                cmd.Parameters.AddWithValue("@ItemId", itemId);
                                                cmd.Parameters.AddWithValue("@OrderId", model.OrderId);
                                                cmd.ExecuteNonQuery();
                                            }
                                            
                                            // Get the menu item name
                                            string menuItemName = null;
                                            using (SqlCommand menuItemCmd = new SqlCommand(@"
                                                SELECT mi.Name
                                                FROM OrderItems oi
                                                INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                                                WHERE oi.Id = @ItemId
                                            ", connection, transaction))
                                            {
                                                menuItemCmd.Parameters.AddWithValue("@ItemId", itemId);
                                                object result = menuItemCmd.ExecuteScalar();
                                                if (result != null)
                                                {
                                                    menuItemName = result.ToString();
                                                    Console.WriteLine($"Menu item name for item {itemId}: {menuItemName}");
                                                }
                                                else
                                                {
                                                    // Use a default value if we can't find the name
                                                    menuItemName = "Unknown Item";
                                                    Console.WriteLine($"Could not find menu item name for item {itemId}");
                                                }
                                            }
                                            
                                            // Add to kitchen ticket items with the menu item name
                                            using (SqlCommand cmd = new SqlCommand($@"
                                                INSERT INTO [{kitchenTicketItemsTableName}] (
                                                    [KitchenTicketId], 
                                                    [OrderItemId], 
                                                    [MenuItemName],
                                                    [Status]
                                                ) VALUES (
                                                    @KitchenTicketId, 
                                                    @OrderItemId, 
                                                    @MenuItemName,
                                                    0
                                                );
                                            ", connection, transaction))
                                            {
                                                cmd.Parameters.AddWithValue("@KitchenTicketId", kitchenTicketId);
                                                cmd.Parameters.AddWithValue("@OrderItemId", itemId);
                                                cmd.Parameters.AddWithValue("@MenuItemName", menuItemName);
                                                cmd.ExecuteNonQuery();
                                                Console.WriteLine($"Added item {itemId} to kitchen ticket {kitchenTicketId}");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        // Check if OrderItems table has UpdatedAt column
                                        bool hasItemUpdatedAtColumn = ColumnExistsInTable("OrderItems", "UpdatedAt");
                                        
                                        // Build SQL based on column existence
                                        string updateAllItemsSql = hasItemUpdatedAtColumn
                                            ? @"UPDATE oi
                                                SET oi.[Status] = 1,
                                                    oi.[FireTime] = GETDATE(),
                                                    oi.[UpdatedAt] = GETDATE()
                                                FROM [OrderItems] oi
                                                WHERE oi.[OrderId] = @OrderId AND oi.[Status] = 0;"
                                            : @"UPDATE oi
                                                SET oi.[Status] = 1,
                                                    oi.[FireTime] = GETDATE()
                                                FROM [OrderItems] oi
                                                WHERE oi.[OrderId] = @OrderId AND oi.[Status] = 0;";
                                        
                                        // Update all unfired order items
                                        using (SqlCommand cmd = new SqlCommand(updateAllItemsSql, connection, transaction))
                                        {
                                            cmd.Parameters.AddWithValue("@OrderId", model.OrderId);
                                            cmd.ExecuteNonQuery();
                                        }
                                        
                                        // Add all newly fired items to kitchen ticket items including menu item names
                                        using (SqlCommand cmd = new SqlCommand($@"
                                            INSERT INTO [{kitchenTicketItemsTableName}] (
                                                [KitchenTicketId], 
                                                [OrderItemId], 
                                                [MenuItemName],
                                                [Status]
                                            )
                                            SELECT 
                                                @KitchenTicketId, 
                                                oi.[Id], 
                                                mi.[Name],
                                                0
                                            FROM [OrderItems] oi
                                            INNER JOIN [MenuItems] mi ON oi.[MenuItemId] = mi.[Id]
                                            WHERE oi.[OrderId] = @OrderId AND oi.[Status] = 1;
                                        ", connection, transaction))
                                        {
                                            cmd.Parameters.AddWithValue("@KitchenTicketId", kitchenTicketId);
                                            cmd.Parameters.AddWithValue("@OrderId", model.OrderId);
                                            int rowsAffected = cmd.ExecuteNonQuery();
                                            Console.WriteLine($"Added {rowsAffected} items to kitchen ticket {kitchenTicketId}");
                                        }
                                    }
                                    
                                    // Check if Orders table has UpdatedAt column
                                    bool hasUpdatedAtColumn = ColumnExistsInTable("Orders", "UpdatedAt");
                                    
                                    // Build the update SQL based on column existence
                                    string updateOrderSql = hasUpdatedAtColumn 
                                        ? @"UPDATE [Orders]
                                            SET [Status] = CASE WHEN [Status] = 0 THEN 1 ELSE [Status] END,
                                                [UpdatedAt] = GETDATE()
                                            WHERE [Id] = @OrderId;"
                                        : @"UPDATE [Orders]
                                            SET [Status] = CASE WHEN [Status] = 0 THEN 1 ELSE [Status] END
                                            WHERE [Id] = @OrderId;";
                                    
                                    // Update order status
                                    using (SqlCommand cmd = new SqlCommand(updateOrderSql, connection, transaction))
                                    {
                                        cmd.Parameters.AddWithValue("@OrderId", model.OrderId);
                                        cmd.ExecuteNonQuery();
                                    }
                                    
                                    // Commit the transaction
                                    transaction.Commit();
                                    
                                    if (kitchenTicketId > 0)
                                    {
                                        TempData["SuccessMessage"] = $"Items fired to kitchen successfully. Ticket #{ticketNumber} created.";
                                    }
                                    else
                                    {
                                        TempData["ErrorMessage"] = "Failed to create kitchen ticket.";
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // Rollback the transaction on error
                                    transaction.Rollback();
                                    TempData["ErrorMessage"] = $"An error occurred: {ex.Message}";
                                    Console.WriteLine($"Transaction error: {ex.Message}");
                                    Console.WriteLine($"Stack trace: {ex.StackTrace}");
                                    
                                    // If there's an inner exception, log it too
                                    if (ex.InnerException != null)
                                    {
                                        Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            TempData["ErrorMessage"] = $"Failed to fire items to kitchen: {ex.Message}";
                            Console.WriteLine($"Database error: {ex.Message}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    TempData["ErrorMessage"] = $"An error occurred: {ex.Message}";
                }
            }
            
            return RedirectToAction("Details", new { id = model.OrderId });
        }
        
        // Browse Menu Items
        public IActionResult BrowseMenu(int id)
        {
            var model = new OrderViewModel
            {
                Id = id,
                MenuCategories = new List<MenuCategoryViewModel>()
            };
            
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get order details
                using (SqlCommand command = new SqlCommand(@"
                    SELECT o.OrderNumber, ISNULL(t.TableName, 'N/A') AS TableName 
                    FROM Orders o
                    LEFT JOIN TableTurnovers tt ON o.TableTurnoverId = tt.Id
                    LEFT JOIN Tables t ON tt.TableId = t.Id
                    WHERE o.Id = @OrderId", connection))
                {
                    command.Parameters.AddWithValue("@OrderId", id);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            model.OrderNumber = reader.GetString(0);
                            model.TableName = reader.GetString(1);
                        }
                        else
                        {
                            return NotFound();
                        }
                    }
                }
                
                // Get all categories
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, Name
                    FROM Categories
                    ORDER BY Name", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            model.MenuCategories.Add(new MenuCategoryViewModel
                            {
                                CategoryId = reader.GetInt32(0),
                                CategoryName = reader.GetString(1),
                                MenuItems = new List<MenuItem>()
                            });
                        }
                    }
                }
                
                // Get menu items for each category
                foreach (var category in model.MenuCategories)
                {
                    using (SqlCommand command = new SqlCommand(@"
                        SELECT Id, Name, Description, Price, IsAvailable, ImagePath
                        FROM MenuItems
                        WHERE CategoryId = @CategoryId AND IsAvailable = 1
                        ORDER BY Name", connection))
                    {
                        command.Parameters.AddWithValue("@CategoryId", category.CategoryId);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                category.MenuItems.Add(new MenuItem
                                {
                                    Id = reader.GetInt32(0),
                                    Name = reader.GetString(1),
                                    Description = reader.IsDBNull(2) ? null : reader.GetString(2),
                                    Price = reader.GetDecimal(3),
                                    IsAvailable = reader.GetBoolean(4),
                                    ImagePath = reader.IsDBNull(5) ? null : reader.GetString(5),
                                    CategoryId = category.CategoryId
                                });
                            }
                        }
                    }
                }
                
                // Only keep categories that have menu items
                model.MenuCategories = model.MenuCategories.Where(c => c.MenuItems.Any()).ToList();
            }
            
            return View(model);
        }
        
        // Helper Methods
        private OrderDashboardViewModel GetOrderDashboard()
        {
            var model = new OrderDashboardViewModel
            {
                ActiveOrders = new List<OrderSummary>(),
                CompletedOrders = new List<OrderSummary>()
            };
            
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get order counts and total sales for today
                using (SqlCommand command = new SqlCommand(@"
                    SELECT
                        SUM(CASE WHEN Status = 0 THEN 1 ELSE 0 END) AS OpenCount,
                        SUM(CASE WHEN Status = 1 THEN 1 ELSE 0 END) AS InProgressCount,
                        SUM(CASE WHEN Status = 2 THEN 1 ELSE 0 END) AS ReadyCount,
                        SUM(CASE WHEN Status = 3 THEN 1 ELSE 0 END) AS CompletedCount,
                        SUM(CASE WHEN Status = 3 THEN TotalAmount ELSE 0 END) AS TotalSales
                    FROM Orders
                    WHERE CAST(CreatedAt AS DATE) = CAST(GETDATE() AS DATE)", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            model.OpenOrdersCount = reader.IsDBNull(0) ? 0 : reader.GetInt32(0);
                            model.InProgressOrdersCount = reader.IsDBNull(1) ? 0 : reader.GetInt32(1);
                            model.ReadyOrdersCount = reader.IsDBNull(2) ? 0 : reader.GetInt32(2);
                            model.CompletedOrdersCount = reader.IsDBNull(3) ? 0 : reader.GetInt32(3);
                            model.TotalSales = reader.IsDBNull(4) ? 0 : reader.GetDecimal(4);
                        }
                    }
                }
                
                // Get active orders
                using (SqlCommand command = new SqlCommand(@"
                    SELECT 
                        o.Id,
                        o.OrderNumber,
                        o.OrderType,
                        o.Status,
                        CASE 
                            WHEN o.OrderType = 0 THEN t.TableName 
                            ELSE NULL 
                        END AS TableName,
                        CASE 
                            WHEN o.OrderType = 0 THEN tt.GuestName 
                            ELSE o.CustomerName 
                        END AS GuestName,
                        CONCAT(u.FirstName, ' ', ISNULL(u.LastName, '')) AS ServerName,
                        (SELECT COUNT(1) FROM OrderItems WHERE OrderId = o.Id) AS ItemCount,
                        o.TotalAmount,
                        o.CreatedAt,
                        DATEDIFF(MINUTE, o.CreatedAt, GETDATE()) AS DurationMinutes
                    FROM Orders o
                    LEFT JOIN TableTurnovers tt ON o.TableTurnoverId = tt.Id
                    LEFT JOIN Tables t ON tt.TableId = t.Id
                    LEFT JOIN Users u ON o.UserId = u.Id
                    WHERE o.Status < 3 -- Not completed
                    AND CAST(o.CreatedAt AS DATE) = CAST(GETDATE() AS DATE)
                    ORDER BY o.CreatedAt DESC", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var orderType = reader.GetInt32(2);
                            string orderTypeDisplay = orderType switch
                            {
                                0 => "Dine-In",
                                1 => "Takeout",
                                2 => "Delivery",
                                3 => "Online",
                                _ => "Unknown"
                            };
                            
                            var status = reader.GetInt32(3);
                            string statusDisplay = status switch
                            {
                                0 => "Open",
                                1 => "In Progress",
                                2 => "Ready",
                                3 => "Completed",
                                4 => "Cancelled",
                                _ => "Unknown"
                            };
                            
                            model.ActiveOrders.Add(new OrderSummary
                            {
                                Id = reader.GetInt32(0),
                                OrderNumber = reader.GetString(1),
                                OrderType = orderType,
                                OrderTypeDisplay = orderTypeDisplay,
                                Status = status,
                                StatusDisplay = statusDisplay,
                                TableName = reader.IsDBNull(4) ? null : reader.GetString(4),
                                GuestName = reader.IsDBNull(5) ? null : reader.GetString(5),
                                ServerName = reader.IsDBNull(6) ? null : reader.GetString(6),
                                ItemCount = reader.GetInt32(7),
                                TotalAmount = reader.GetDecimal(8),
                                CreatedAt = reader.GetDateTime(9),
                                Duration = TimeSpan.FromMinutes(reader.GetInt32(10))
                            });
                        }
                    }
                }
                
                // Get completed orders for today
                using (SqlCommand command = new SqlCommand(@"
                    SELECT 
                        o.Id,
                        o.OrderNumber,
                        o.OrderType,
                        o.Status,
                        CASE 
                            WHEN o.OrderType = 0 THEN t.TableName 
                            ELSE NULL 
                        END AS TableName,
                        CASE 
                            WHEN o.OrderType = 0 THEN tt.GuestName 
                            ELSE o.CustomerName 
                        END AS GuestName,
                        CONCAT(u.FirstName, ' ', ISNULL(u.LastName, '')) AS ServerName,
                        (SELECT COUNT(1) FROM OrderItems WHERE OrderId = o.Id) AS ItemCount,
                        o.TotalAmount,
                        o.CreatedAt,
                        DATEDIFF(MINUTE, o.CreatedAt, o.CompletedAt) AS DurationMinutes
                    FROM Orders o
                    LEFT JOIN TableTurnovers tt ON o.TableTurnoverId = tt.Id
                    LEFT JOIN Tables t ON tt.TableId = t.Id
                    LEFT JOIN Users u ON o.UserId = u.Id
                    WHERE o.Status = 3 -- Completed
                    AND CAST(o.CreatedAt AS DATE) = CAST(GETDATE() AS DATE)
                    ORDER BY o.CompletedAt DESC", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var orderType = reader.GetInt32(2);
                            string orderTypeDisplay = orderType switch
                            {
                                0 => "Dine-In",
                                1 => "Takeout",
                                2 => "Delivery",
                                3 => "Online",
                                _ => "Unknown"
                            };
                            
                            model.CompletedOrders.Add(new OrderSummary
                            {
                                Id = reader.GetInt32(0),
                                OrderNumber = reader.GetString(1),
                                OrderType = orderType,
                                OrderTypeDisplay = orderTypeDisplay,
                                Status = 3, // Completed
                                StatusDisplay = "Completed",
                                TableName = reader.IsDBNull(4) ? null : reader.GetString(4),
                                GuestName = reader.IsDBNull(5) ? null : reader.GetString(5),
                                ServerName = reader.IsDBNull(6) ? null : reader.GetString(6),
                                ItemCount = reader.GetInt32(7),
                                TotalAmount = reader.GetDecimal(8),
                                CreatedAt = reader.GetDateTime(9),
                                Duration = TimeSpan.FromMinutes(reader.IsDBNull(10) ? 0 : reader.GetInt32(10))
                            });
                        }
                    }
                }
            }
            
            return model;
        }
        
        /// <summary>
        /// Helper method to build SQL queries with either StationId or KitchenStationId
        /// depending on the database schema
        /// </summary>
        private string GetSafeStationIdFieldName()
        {
            // Default to using KitchenStationId as that's the schema in the model
            return "KitchenStationId";
        }
        
        /// <summary>
        /// Helper method to get the correct table name for menu item relationships
        /// </summary>
        private string GetMenuItemRelationshipTableName(string relationship)
        {
            // Check if the table exists with underscore first (as in SQL scripts)
            bool tableWithUnderscoreExists = false;
            bool tableWithoutUnderscoreExists = false;
            
            try
            {
                using (SqlConnection con = new SqlConnection(_connectionString))
                {
                    con.Open();
                    
                    // Check if table with underscore exists
                    using (SqlCommand cmd = new SqlCommand($"SELECT CASE WHEN OBJECT_ID('MenuItem_{relationship}', 'U') IS NOT NULL THEN 1 ELSE 0 END", con))
                    {
                        tableWithUnderscoreExists = Convert.ToBoolean(cmd.ExecuteScalar());
                    }
                    
                    // Only check without underscore if underscore version doesn't exist
                    if (!tableWithUnderscoreExists)
                    {
                        using (SqlCommand cmd = new SqlCommand($"SELECT CASE WHEN OBJECT_ID('MenuItem{relationship}', 'U') IS NOT NULL THEN 1 ELSE 0 END", con))
                        {
                            tableWithoutUnderscoreExists = Convert.ToBoolean(cmd.ExecuteScalar());
                        }
                    }
                }
            }
            catch
            {
                // If any error occurs, assume neither table exists
                tableWithUnderscoreExists = false;
                tableWithoutUnderscoreExists = false;
            }
            
            if (tableWithUnderscoreExists)
                return $"MenuItem_{relationship}";
            else if (tableWithoutUnderscoreExists)
                return $"MenuItem{relationship}";
            else
                return $"MenuItem{relationship}"; // Default to version without underscore
        }
        
        /// <summary>
        /// Helper method to check if a column exists in a table
        /// </summary>
        private bool ColumnExistsInTable(string tableName, string columnName)
        {
            try
            {
                // Safety check - if table doesn't exist, column can't exist
                if (string.IsNullOrEmpty(tableName))
                {
                    return false;
                }

                // Clean table name (remove any brackets and schema)
                string cleanTableName = tableName.Replace("[", "").Replace("]", "");
                if (cleanTableName.Contains("."))
                {
                    cleanTableName = cleanTableName.Split('.').Last();
                }
                
                using (SqlConnection con = new SqlConnection(_connectionString))
                {
                    con.Open();
                    
                    // First verify the table exists
                    string tableQuery = @"
                        SELECT COUNT(1)
                        FROM sys.tables
                        WHERE name = @TableName";
                        
                    using (SqlCommand cmd = new SqlCommand(tableQuery, con))
                    {
                        cmd.Parameters.AddWithValue("@TableName", cleanTableName);
                        int tableExists = Convert.ToInt32(cmd.ExecuteScalar());
                        
                        if (tableExists == 0)
                        {
                            return false; // Table doesn't exist
                        }
                    }
                    
                    // Now check if the column exists
                    string columnQuery = @"
                        SELECT COUNT(1)
                        FROM sys.columns c
                        JOIN sys.tables t ON c.object_id = t.object_id
                        WHERE t.name = @TableName AND c.name = @ColumnName";
                    
                    using (SqlCommand cmd = new SqlCommand(columnQuery, con))
                    {
                        cmd.Parameters.AddWithValue("@TableName", cleanTableName);
                        cmd.Parameters.AddWithValue("@ColumnName", columnName);
                        
                        int result = Convert.ToInt32(cmd.ExecuteScalar());
                        return result > 0;
                    }
                }
            }
            catch (Exception ex)
            {
                // Log the exception if possible
                Console.WriteLine($"Error checking column existence: {ex.Message}");
                // If any error occurs, assume the column doesn't exist
                return false;
            }
        }
        
        /// <summary>
        /// Helper method to check if a table exists in the database
        /// </summary>
        private bool TableExists(string tableName)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(_connectionString))
                {
                    con.Open();
                    
                    using (SqlCommand cmd = new SqlCommand($"SELECT CASE WHEN OBJECT_ID(@TableName, 'U') IS NOT NULL THEN 1 ELSE 0 END", con))
                    {
                        cmd.Parameters.AddWithValue("@TableName", tableName);
                        return Convert.ToBoolean(cmd.ExecuteScalar());
                    }
                }
            }
            catch
            {
                return false;
            }
        }
        
        /// <summary>
        /// Helper method to find the correct version of a table name
        /// </summary>
        private string GetCorrectTableName(string baseTableName, string alternativeTableName)
        {
            if (TableExists(baseTableName))
            {
                return baseTableName;
            }
            else if (TableExists(alternativeTableName))
            {
                return alternativeTableName;
            }
            
            // Return the base name as fallback
            return baseTableName;
        }
        
        private OrderViewModel GetOrderDetails(int id)
        {
            OrderViewModel order = null;
            
            // Use separate connections for different data readers to avoid nested DataReader issues
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get order details
                // First check if the UpdatedAt column exists in the Orders table
                bool hasUpdatedAtColumn = ColumnExistsInTable("Orders", "UpdatedAt");
                
                // Build the SQL query based on column existence
                string selectSql = hasUpdatedAtColumn 
                    ? @"SELECT 
                        o.Id,
                        o.OrderNumber,
                        o.TableTurnoverId,
                        o.OrderType,
                        o.Status,
                        o.UserId,
                        CONCAT(u.FirstName, ' ', ISNULL(u.LastName, '')) AS ServerName,
                        o.CustomerName,
                        o.CustomerPhone,
                        o.Subtotal,
                        o.TaxAmount,
                        o.TipAmount,
                        o.DiscountAmount,
                        o.TotalAmount,
                        o.SpecialInstructions,
                        o.CreatedAt,
                        o.UpdatedAt,
                        o.CompletedAt,"
                    : @"SELECT 
                        o.Id,
                        o.OrderNumber,
                        o.TableTurnoverId,
                        o.OrderType,
                        o.Status,
                        o.UserId,
                        CONCAT(u.FirstName, ' ', ISNULL(u.LastName, '')) AS ServerName,
                        o.CustomerName,
                        o.CustomerPhone,
                        o.Subtotal,
                        o.TaxAmount,
                        o.TipAmount,
                        o.DiscountAmount,
                        o.TotalAmount,
                        o.SpecialInstructions,
                        o.CreatedAt,
                        o.CreatedAt AS UpdatedAt, -- Use CreatedAt as a fallback
                        o.CompletedAt,";

                using (SqlCommand command = new SqlCommand(selectSql + @"
                        CASE 
                            WHEN o.TableTurnoverId IS NOT NULL THEN t.TableName 
                            ELSE NULL 
                        END AS TableName,
                        CASE 
                            WHEN o.TableTurnoverId IS NOT NULL THEN tt.GuestName 
                            ELSE o.CustomerName 
                        END AS GuestName
                    FROM Orders o
                    LEFT JOIN Users u ON o.UserId = u.Id
                    LEFT JOIN TableTurnovers tt ON o.TableTurnoverId = tt.Id
                    LEFT JOIN Tables t ON tt.TableId = t.Id
                    WHERE o.Id = @OrderId", connection))
                {
                    command.Parameters.AddWithValue("@OrderId", id);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            var orderType = reader.GetInt32(3);
                            string orderTypeDisplay = orderType switch
                            {
                                0 => "Dine In",
                                1 => "Take Out",
                                2 => "Delivery",
                                _ => "Unknown"
                            };
                            
                            var status = reader.GetInt32(4);
                            string statusDisplay = status switch
                            {
                                0 => "Open",
                                1 => "In Progress",
                                2 => "Ready",
                                3 => "Completed",
                                4 => "Cancelled",
                                _ => "Unknown"
                            };
                            
                            order = new OrderViewModel
                            {
                                Id = reader.GetInt32(0),
                                OrderNumber = reader.GetString(1),
                                TableTurnoverId = reader.IsDBNull(2) ? null : (int?)reader.GetInt32(2),
                                OrderType = orderType,
                                OrderTypeDisplay = orderTypeDisplay,
                                Status = status,
                                StatusDisplay = statusDisplay,
                                ServerName = reader.IsDBNull(6) ? null : reader.GetString(6),
                                CustomerName = reader.IsDBNull(7) ? null : reader.GetString(7),
                                CustomerPhone = reader.IsDBNull(8) ? null : reader.GetString(8),
                                Subtotal = reader.GetDecimal(9),
                                TaxAmount = reader.GetDecimal(10),
                                TipAmount = reader.GetDecimal(11),
                                DiscountAmount = reader.GetDecimal(12),
                                TotalAmount = reader.GetDecimal(13),
                                SpecialInstructions = reader.IsDBNull(14) ? null : reader.GetString(14),
                                CreatedAt = reader.GetDateTime(15),
                                UpdatedAt = reader.GetDateTime(16), // We've handled this in the SQL query
                                CompletedAt = reader.IsDBNull(17) ? null : (DateTime?)reader.GetDateTime(17),
                                TableName = reader.IsDBNull(18) ? null : reader.GetString(18),
                                GuestName = reader.IsDBNull(19) ? null : reader.GetString(19),
                                Items = new List<OrderItemViewModel>(),
                                KitchenTickets = new List<KitchenTicketViewModel>(),
                                AvailableCourses = new List<CourseType>()
                            };
                        }
                        else
                        {
                            return null; // Order not found
                        }
                    }
                }
                
                // Get order items
                using (SqlCommand command = new SqlCommand(@"
                    SELECT 
                        oi.Id,
                        oi.MenuItemId,
                        mi.Name AS MenuItemName,
                        mi.Description AS MenuItemDescription,
                        oi.Quantity,
                        oi.UnitPrice,
                        oi.Subtotal,
                        oi.SpecialInstructions,
                        oi.CourseId,
                        ct.Name AS CourseName,
                        oi.Status,
                        oi.FireTime,
                        oi.CompletionTime,
                        oi.DeliveryTime
                    FROM OrderItems oi
                    INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                    LEFT JOIN CourseTypes ct ON oi.CourseId = ct.Id
                    WHERE oi.OrderId = @OrderId
                    ORDER BY 
                        CASE WHEN oi.CourseId IS NULL THEN 999 ELSE oi.CourseId END,
                        oi.CreatedAt", connection))
                {
                    command.Parameters.AddWithValue("@OrderId", id);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var status = reader.GetInt32(10);
                            string statusDisplay = status switch
                            {
                                0 => "New",
                                1 => "Fired",
                                2 => "Cooking",
                                3 => "Ready",
                                4 => "Delivered",
                                5 => "Cancelled",
                                _ => "Unknown"
                            };
                            
                            var orderItem = new OrderItemViewModel
                            {
                                Id = reader.GetInt32(0),
                                OrderId = id,
                                MenuItemId = reader.GetInt32(1),
                                MenuItemName = reader.GetString(2),
                                MenuItemDescription = reader.IsDBNull(3) ? null : reader.GetString(3),
                                Quantity = reader.GetInt32(4),
                                UnitPrice = reader.GetDecimal(5),
                                Subtotal = reader.GetDecimal(6),
                                SpecialInstructions = reader.IsDBNull(7) ? null : reader.GetString(7),
                                CourseId = reader.IsDBNull(8) ? null : (int?)reader.GetInt32(8),
                                CourseName = reader.IsDBNull(9) ? null : reader.GetString(9),
                                Status = status,
                                StatusDisplay = statusDisplay,
                                FireTime = reader.IsDBNull(11) ? null : (DateTime?)reader.GetDateTime(11),
                                CompletionTime = reader.IsDBNull(12) ? null : (DateTime?)reader.GetDateTime(12),
                                DeliveryTime = reader.IsDBNull(13) ? null : (DateTime?)reader.GetDateTime(13),
                                Modifiers = new List<OrderItemModifierViewModel>()
                            };
                            
                            order.Items.Add(orderItem);
                        }
                    }
                }
            }
                
            // Get order item modifiers using separate connections for each item
            foreach (var item in order.Items)
            {
                // Check which version of the table exists (with or without underscore)
                string orderItemModifiersTable = GetCorrectTableName("OrderItemModifiers", "OrderItem_Modifiers");
                
                if (!string.IsNullOrEmpty(orderItemModifiersTable))
                {
                    // Use a separate connection for modifiers to avoid DataReader issues
                    using (SqlConnection connection = new SqlConnection(_connectionString))
                    {
                        connection.Open();
                        
                        string modifiersQuery = $@"
                            SELECT 
                                oim.Id,
                                oim.ModifierId,
                                m.Name AS ModifierName,
                                oim.Price
                            FROM {orderItemModifiersTable} oim
                            INNER JOIN Modifiers m ON oim.ModifierId = m.Id
                            WHERE oim.OrderItemId = @OrderItemId";
                            
                        using (SqlCommand command = new SqlCommand(modifiersQuery, connection))
                        {
                            command.Parameters.AddWithValue("@OrderItemId", item.Id);
                            
                            try
                            {
                                using (SqlDataReader reader = command.ExecuteReader())
                                {
                                    while (reader.Read())
                                    {
                                        item.Modifiers.Add(new OrderItemModifierViewModel
                                        {
                                            Id = reader.GetInt32(0),
                                            OrderItemId = item.Id,
                                            ModifierId = reader.GetInt32(1),
                                            ModifierName = reader.GetString(2),
                                            Price = reader.GetDecimal(3)
                                        });
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                // Log the exception
                                Console.WriteLine($"Error getting modifiers for order item {item.Id}: {ex.Message}");
                            }
                        }
                    }
                }
            }
                
            // Get kitchen tickets using a separate connection
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                string stationIdFieldName = GetSafeStationIdFieldName();
                string kitchenTicketQuery = $@"
                    SELECT 
                        kt.Id,
                        kt.TicketNumber,
                        kt.{stationIdFieldName},
                        kt.Status,
                        kt.CreatedAt,
                        kt.CompletedAt
                    FROM KitchenTickets kt
                    WHERE kt.OrderId = @OrderId
                    ORDER BY kt.CreatedAt DESC";
                
                using (SqlCommand command = new SqlCommand(kitchenTicketQuery, connection))
                {
                    command.Parameters.AddWithValue("@OrderId", id);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var status = reader.GetInt32(3);
                            string statusDisplay = status switch
                            {
                                0 => "New",
                                1 => "In Progress",
                                2 => "Ready",
                                3 => "Completed",
                                4 => "Cancelled",
                                _ => "Unknown"
                            };
                            
                            var kitchenTicket = new KitchenTicketViewModel
                            {
                                Id = reader.GetInt32(0),
                                TicketNumber = reader.GetString(1),
                                OrderId = id,
                                OrderNumber = order.OrderNumber,
                                StationId = reader.IsDBNull(2) ? null : (int?)reader.GetInt32(2),
                                Status = status,
                                StatusDisplay = statusDisplay,
                                CreatedAt = reader.GetDateTime(4),
                                CompletedAt = reader.IsDBNull(5) ? null : (DateTime?)reader.GetDateTime(5),
                                Items = new List<KitchenTicketItemViewModel>()
                            };
                            
                            order.KitchenTickets.Add(kitchenTicket);
                        }
                    }
                }
            }
            
            // Use a new connection for kitchen ticket items to avoid DataReader issues
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                
                // Get kitchen ticket items
                foreach (var ticket in order.KitchenTickets)
                {
                    // Get the correct table name for kitchen ticket items
                    string kitchenTicketItemsTable = GetCorrectTableName("KitchenTicketItems", "Kitchen_TicketItems");
                    
                    string queryString;
                    if (kitchenTicketItemsTable == "KitchenTicketItems")
                    {
                        // Use direct field access because the schema might have changed
                        queryString = $@"
                            SELECT 
                                kti.Id,
                                kti.OrderItemId,
                                mi.Name,
                                oi.Quantity,
                                oi.SpecialInstructions,
                                kti.Status,
                                kti.StartTime,
                                kti.CompletionTime,
                                kti.Notes
                            FROM {kitchenTicketItemsTable} kti
                            INNER JOIN OrderItems oi ON kti.OrderItemId = oi.Id
                            INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                            WHERE kti.KitchenTicketId = @KitchenTicketId";
                    }
                    else
                    {
                        // Get field names for the alternate version of the table
                        queryString = $@"
                            SELECT 
                                kti.Id,
                                kti.OrderItemId,
                                mi.Name,
                                oi.Quantity,
                                oi.SpecialInstructions,
                                kti.Status,
                                kti.StartTime,
                                kti.CompletionTime,
                                kti.Notes
                            FROM {kitchenTicketItemsTable} kti
                            INNER JOIN OrderItems oi ON kti.OrderItemId = oi.Id
                            INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                            WHERE kti.KitchenTicketId = @KitchenTicketId";
                    }
                    
                    using (SqlCommand command = new SqlCommand(queryString, connection))
                    {
                        command.Parameters.AddWithValue("@KitchenTicketId", ticket.Id);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var status = reader.GetInt32(5);
                                string statusDisplay = status switch
                                {
                                    0 => "New",
                                    1 => "In Progress",
                                    2 => "Ready",
                                    3 => "Completed",
                                    4 => "Cancelled",
                                    _ => "Unknown"
                                };
                                
                                var ticketItem = new KitchenTicketItemViewModel
                                {
                                    Id = reader.GetInt32(0),
                                    KitchenTicketId = ticket.Id,
                                    OrderItemId = reader.GetInt32(1),
                                    MenuItemName = reader.GetString(2),
                                    Quantity = reader.GetInt32(3),
                                    SpecialInstructions = reader.IsDBNull(4) ? null : reader.GetString(4),
                                    Status = status,
                                    StatusDisplay = statusDisplay,
                                    StartTime = reader.IsDBNull(6) ? null : (DateTime?)reader.GetDateTime(6),
                                    CompletionTime = reader.IsDBNull(7) ? null : (DateTime?)reader.GetDateTime(7),
                                    Notes = reader.IsDBNull(8) ? null : reader.GetString(8),
                                    Modifiers = new List<string>()
                                };
                                
                                // Get modifiers for this ticket item using a separate connection
                                string orderItemModifiersTable = GetCorrectTableName("OrderItemModifiers", "OrderItem_Modifiers");
                                
                                if (!string.IsNullOrEmpty(orderItemModifiersTable))
                                {
                                    using (SqlConnection modConnection = new SqlConnection(_connectionString))
                                    {
                                        modConnection.Open();
                                        string modifiersQuery = $@"
                                            SELECT m.Name
                                            FROM {orderItemModifiersTable} oim
                                            INNER JOIN Modifiers m ON oim.ModifierId = m.Id
                                            WHERE oim.OrderItemId = @OrderItemId";
                                            
                                        using (SqlCommand modifiersCommand = new SqlCommand(modifiersQuery, modConnection))
                                        {
                                            modifiersCommand.Parameters.AddWithValue("@OrderItemId", ticketItem.OrderItemId);
                                        
                                            using (SqlDataReader modifiersReader = modifiersCommand.ExecuteReader())
                                            {
                                                while (modifiersReader.Read())
                                                {
                                                    ticketItem.Modifiers.Add(modifiersReader.GetString(0));
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                ticket.Items.Add(ticketItem);
                            }
                        }
                    }
                }
                
                // Get available courses for new items
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, Name
                    FROM CourseTypes
                    ORDER BY DisplayOrder", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            order.AvailableCourses.Add(new CourseType
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1)
                            });
                        }
                    }
                }
            }
            
            return order;
        }
        private OrderViewModel GetOrderDetails(int id)
        {
            OrderViewModel order = null;
            
            // Use separate connections for different data readers to avoid nested DataReader issues
            using (SqlConnection orderConnection = new SqlConnection(_connectionString))
            {
                orderConnection.Open();
                
                // Get order details
                // First check if the UpdatedAt column exists in the Orders table
                bool hasUpdatedAtColumn = ColumnExistsInTable("Orders", "UpdatedAt");
                
                // Build the SQL query based on column existence
                string selectSql = hasUpdatedAtColumn 
                    ? @"SELECT 
                        o.Id,
                        o.OrderNumber,
                        o.TableTurnoverId,
                        o.OrderType,
                        o.Status,
                        o.UserId,
                        CONCAT(u.FirstName, ' ', ISNULL(u.LastName, '')) AS ServerName,
                        o.CustomerName,
                        o.CustomerPhone,
                        o.Subtotal,
                        o.TaxAmount,
                        o.TipAmount,
                        o.DiscountAmount,
                        o.TotalAmount,
                        o.SpecialInstructions,
                        o.CreatedAt,
                        o.UpdatedAt,
                        o.CompletedAt,"
                    : @"SELECT 
                        o.Id,
                        o.OrderNumber,
                        o.TableTurnoverId,
                        o.OrderType,
                        o.Status,
                        o.UserId,
                        CONCAT(u.FirstName, ' ', ISNULL(u.LastName, '')) AS ServerName,
                        o.CustomerName,
                        o.CustomerPhone,
                        o.Subtotal,
                        o.TaxAmount,
                        o.TipAmount,
                        o.DiscountAmount,
                        o.TotalAmount,
                        o.SpecialInstructions,
                        o.CreatedAt,
                        o.CreatedAt AS UpdatedAt, -- Use CreatedAt as a fallback
                        o.CompletedAt,";

                using (SqlCommand command = new SqlCommand(selectSql + @"
                        CASE 
                            WHEN o.TableTurnoverId IS NOT NULL THEN t.TableName 
                            ELSE NULL 
                        END AS TableName,
                        CASE 
                            WHEN o.TableTurnoverId IS NOT NULL THEN tt.GuestName 
                            ELSE o.CustomerName 
                        END AS GuestName
                    FROM Orders o
                    LEFT JOIN Users u ON o.UserId = u.Id
                    LEFT JOIN TableTurnovers tt ON o.TableTurnoverId = tt.Id
                    LEFT JOIN Tables t ON tt.TableId = t.Id
                    WHERE o.Id = @OrderId", orderConnection))
                {
                    command.Parameters.AddWithValue("@OrderId", id);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            var orderType = reader.GetInt32(3);
                            string orderTypeDisplay = orderType switch
                            {
                                0 => "Dine-In",
                                1 => "Takeout",
                                2 => "Delivery",
                                3 => "Online",
                                _ => "Unknown"
                            };
                            
                            var status = reader.GetInt32(4);
                            string statusDisplay = status switch
                            {
                                0 => "Open",
                                1 => "In Progress",
                                2 => "Ready",
                                3 => "Completed",
                                4 => "Cancelled",
                                _ => "Unknown"
                            };
                            
                            order = new OrderViewModel
                            {
                                Id = reader.GetInt32(0),
                                OrderNumber = reader.GetString(1),
                                TableTurnoverId = reader.IsDBNull(2) ? null : (int?)reader.GetInt32(2),
                                OrderType = orderType,
                                OrderTypeDisplay = orderTypeDisplay,
                                Status = status,
                                StatusDisplay = statusDisplay,
                                ServerName = reader.IsDBNull(6) ? null : reader.GetString(6),
                                CustomerName = reader.IsDBNull(7) ? null : reader.GetString(7),
                                CustomerPhone = reader.IsDBNull(8) ? null : reader.GetString(8),
                                Subtotal = reader.GetDecimal(9),
                                TaxAmount = reader.GetDecimal(10),
                                TipAmount = reader.GetDecimal(11),
                                DiscountAmount = reader.GetDecimal(12),
                                TotalAmount = reader.GetDecimal(13),
                                SpecialInstructions = reader.IsDBNull(14) ? null : reader.GetString(14),
                                CreatedAt = reader.GetDateTime(15),
                                UpdatedAt = reader.GetDateTime(16), // We've handled this in the SQL query
                                CompletedAt = reader.IsDBNull(17) ? null : (DateTime?)reader.GetDateTime(17),
                                TableName = reader.IsDBNull(18) ? null : reader.GetString(18),
                                GuestName = reader.IsDBNull(19) ? null : reader.GetString(19),
                                Items = new List<OrderItemViewModel>(),
                                KitchenTickets = new List<KitchenTicketViewModel>()
                            };
                        }
                        else
                        {
                            return null; // Order not found
                        }
                    }
                }
                
                // Get order items with a separate connection
                using (SqlConnection itemsConnection = new SqlConnection(_connectionString))
                {
                    itemsConnection.Open();
                    
                    using (SqlCommand command = new SqlCommand(@"
                        SELECT 
                            oi.Id,
                            oi.MenuItemId,
                            mi.Name AS MenuItemName,
                            mi.Description AS MenuItemDescription,
                            oi.Quantity,
                            oi.UnitPrice,
                            oi.Subtotal,
                            oi.SpecialInstructions,
                            oi.CourseId,
                            ct.Name AS CourseName,
                            oi.Status,
                            oi.FireTime,
                            oi.CompletionTime,
                            oi.DeliveryTime
                        FROM OrderItems oi
                        INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                        LEFT JOIN CourseTypes ct ON oi.CourseId = ct.Id
                        WHERE oi.OrderId = @OrderId
                        ORDER BY 
                            CASE WHEN oi.CourseId IS NULL THEN 999 ELSE oi.CourseId END,
                            oi.CreatedAt", itemsConnection))
                {
                    command.Parameters.AddWithValue("@OrderId", id);
                    
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var status = reader.GetInt32(10);
                            string statusDisplay = status switch
                            {
                                0 => "New",
                                1 => "Fired",
                                2 => "Cooking",
                                3 => "Ready",
                                4 => "Delivered",
                                5 => "Cancelled",
                                _ => "Unknown"
                            };
                            
                            var orderItem = new OrderItemViewModel
                            {
                                Id = reader.GetInt32(0),
                                OrderId = id,
                                MenuItemId = reader.GetInt32(1),
                                MenuItemName = reader.GetString(2),
                                MenuItemDescription = reader.IsDBNull(3) ? null : reader.GetString(3),
                                Quantity = reader.GetInt32(4),
                                UnitPrice = reader.GetDecimal(5),
                                Subtotal = reader.GetDecimal(6),
                                SpecialInstructions = reader.IsDBNull(7) ? null : reader.GetString(7),
                                CourseId = reader.IsDBNull(8) ? null : (int?)reader.GetInt32(8),
                                CourseName = reader.IsDBNull(9) ? null : reader.GetString(9),
                                Status = status,
                                StatusDisplay = statusDisplay,
                                FireTime = reader.IsDBNull(11) ? null : (DateTime?)reader.GetDateTime(11),
                                CompletionTime = reader.IsDBNull(12) ? null : (DateTime?)reader.GetDateTime(12),
                                DeliveryTime = reader.IsDBNull(13) ? null : (DateTime?)reader.GetDateTime(13),
                                Modifiers = new List<OrderItemModifierViewModel>()
                            };
                            
                            order.Items.Add(orderItem);
                        }
                    }
                }
                
                // Get order item modifiers
                foreach (var item in order.Items)
                {
                    // Check which version of the table exists (with or without underscore)
                    string orderItemModifiersTable = GetCorrectTableName("OrderItemModifiers", "OrderItem_Modifiers");
                    
                    if (!string.IsNullOrEmpty(orderItemModifiersTable))
                    {
                        // Use a separate connection for modifiers to avoid DataReader issues
                        using (SqlConnection modifiersConnection = new SqlConnection(_connectionString))
                        {
                            modifiersConnection.Open();
                            
                            string modifiersQuery = $@"
                                SELECT 
                                    oim.Id,
                                    oim.ModifierId,
                                    m.Name AS ModifierName,
                                    oim.Price
                                FROM {orderItemModifiersTable} oim
                                INNER JOIN Modifiers m ON oim.ModifierId = m.Id
                                WHERE oim.OrderItemId = @OrderItemId";
                                
                            using (SqlCommand command = new SqlCommand(modifiersQuery, modifiersConnection))
                            {
                                command.Parameters.AddWithValue("@OrderItemId", item.Id);
                                
                                try
                                {
                                    using (SqlDataReader reader = command.ExecuteReader())
                                    {
                                        while (reader.Read())
                                        {
                                            item.Modifiers.Add(new OrderItemModifierViewModel
                                            {
                                                Id = reader.GetInt32(0),
                                                OrderItemId = item.Id,
                                                ModifierId = reader.GetInt32(1),
                                                ModifierName = reader.GetString(2),
                                                Price = reader.GetDecimal(3)
                                            });
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                    // Log the exception
                                    Console.WriteLine($"Error getting modifiers for order item {item.Id}: {ex.Message}");
                                }
                            }
                        }
                    }
                }
                
                // Get kitchen tickets using a separate connection
                using (SqlConnection ticketsConnection = new SqlConnection(_connectionString))
                {
                    ticketsConnection.Open();
                    
                    string stationIdFieldName = GetSafeStationIdFieldName();
                    string kitchenTicketQuery = $@"
                        SELECT 
                            kt.Id,
                            kt.TicketNumber,
                            kt.{stationIdFieldName},
                            kt.Status,
                            kt.CreatedAt,
                            kt.CompletedAt
                        FROM KitchenTickets kt
                        WHERE kt.OrderId = @OrderId
                        ORDER BY kt.CreatedAt DESC";
                    
                    using (SqlCommand command = new SqlCommand(kitchenTicketQuery, ticketsConnection))
                    {
                        command.Parameters.AddWithValue("@OrderId", id);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var status = reader.GetInt32(3);
                                string statusDisplay = status switch
                                {
                                    0 => "New",
                                    1 => "In Progress",
                                    2 => "Ready",
                                    3 => "Completed",
                                    4 => "Cancelled",
                                    _ => "Unknown"
                                };
                                
                                var kitchenTicket = new KitchenTicketViewModel
                                {
                                    Id = reader.GetInt32(0),
                                    TicketNumber = reader.GetString(1),
                                    OrderId = id,
                                    OrderNumber = order.OrderNumber,
                                    StationId = reader.IsDBNull(2) ? null : (int?)reader.GetInt32(2),
                                    Status = status,
                                    StatusDisplay = statusDisplay,
                                    CreatedAt = reader.GetDateTime(4),
                                    CompletedAt = reader.IsDBNull(5) ? null : (DateTime?)reader.GetDateTime(5),
                                    Items = new List<KitchenTicketItemViewModel>()
                                };
                                
                                order.KitchenTickets.Add(kitchenTicket);
                            }
                        }
                    }
                }
                
            }
            
            // Use a new connection for kitchen ticket items to avoid DataReader issues
            using (SqlConnection kitchenConnection = new SqlConnection(_connectionString))
            {
                kitchenConnection.Open();
                
                // Get kitchen ticket items
                foreach (var ticket in order.KitchenTickets)
                {
                    // Get the correct table name for kitchen ticket items
                    string kitchenTicketItemsTable = GetCorrectTableName("KitchenTicketItems", "Kitchen_TicketItems");
                    
                    string queryString;
                    if (kitchenTicketItemsTable == "KitchenTicketItems")
                    {
                        // Use direct field access because the schema might have changed
                        queryString = $@"
                            SELECT 
                                kti.Id,
                                kti.OrderItemId,
                                COALESCE(kti.MenuItemName, mi.Name) AS MenuItemName,
                                oi.Quantity,
                                oi.SpecialInstructions,
                                kti.Status,
                                kti.StartTime,
                                kti.CompletionTime,
                                kti.Notes
                            FROM {kitchenTicketItemsTable} kti
                            INNER JOIN OrderItems oi ON kti.OrderItemId = oi.Id
                            LEFT JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                            WHERE kti.KitchenTicketId = @KitchenTicketId";
                    }
                    else
                    {
                        // Use the old schema
                        queryString = $@"
                            SELECT 
                                kti.Id,
                                kti.OrderItemId,
                                mi.Name AS MenuItemName,
                                oi.Quantity,
                                oi.SpecialInstructions,
                                kti.Status,
                                kti.StartTime,
                                kti.CompletionTime,
                                kti.Notes
                            FROM {kitchenTicketItemsTable} kti
                            INNER JOIN OrderItems oi ON kti.OrderItemId = oi.Id
                            INNER JOIN MenuItems mi ON oi.MenuItemId = mi.Id
                            WHERE kti.KitchenTicketId = @KitchenTicketId";
                    }
                    
                    using (SqlCommand command = new SqlCommand(queryString, kitchenConnection))
                    {
                        command.Parameters.AddWithValue("@KitchenTicketId", ticket.Id);
                        
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var status = reader.GetInt32(5);
                                string statusDisplay = status switch
                                {
                                    0 => "New",
                                    1 => "In Progress",
                                    2 => "Ready",
                                    3 => "Completed",
                                    4 => "Cancelled",
                                    _ => "Unknown"
                                };
                                
                                var ticketItem = new KitchenTicketItemViewModel
                                {
                                    Id = reader.GetInt32(0),
                                    KitchenTicketId = ticket.Id,
                                    OrderItemId = reader.GetInt32(1),
                                    MenuItemName = reader.GetString(2),
                                    Quantity = reader.GetInt32(3),
                                    SpecialInstructions = reader.IsDBNull(4) ? null : reader.GetString(4),
                                    Status = status,
                                    StatusDisplay = statusDisplay,
                                    StartTime = reader.IsDBNull(6) ? null : (DateTime?)reader.GetDateTime(6),
                                    CompletionTime = reader.IsDBNull(7) ? null : (DateTime?)reader.GetDateTime(7),
                                    Notes = reader.IsDBNull(8) ? null : reader.GetString(8),
                                    Modifiers = new List<string>()
                                };
                                
                                // Get modifiers for this ticket item
                                // Check which version of the table exists (with or without underscore)
                                string orderItemModifiersTable = GetCorrectTableName("OrderItemModifiers", "OrderItem_Modifiers");
                                
                                if (!string.IsNullOrEmpty(orderItemModifiersTable))
                                {
                                    string modifiersQuery = $@"
                                        SELECT m.Name
                                        FROM {orderItemModifiersTable} oim
                                        INNER JOIN Modifiers m ON oim.ModifierId = m.Id
                                        WHERE oim.OrderItemId = @OrderItemId";
                                        
                                    using (SqlCommand modifiersCommand = new SqlCommand(modifiersQuery, kitchenConnection))
                                    {
                                        modifiersCommand.Parameters.AddWithValue("@OrderItemId", ticketItem.OrderItemId);
                                    
                                        using (SqlDataReader modifiersReader = modifiersCommand.ExecuteReader())
                                        {
                                            while (modifiersReader.Read())
                                            {
                                                ticketItem.Modifiers.Add(modifiersReader.GetString(0));
                                            }
                                        }
                                    }
                                }
                                
                                ticket.Items.Add(ticketItem);
                            }
                        }
                    }
                }
                
                // Get available courses for new items
                using (SqlCommand command = new SqlCommand(@"
                    SELECT Id, Name
                    FROM CourseTypes
                    ORDER BY DisplayOrder", kitchenConnection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            order.AvailableCourses.Add(new CourseType
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1)
                            });
                        }
                    }
                }
            }
            
            return order;
        }
        
        private int GetCurrentUserId()
        {
            // In a real application, get this from authentication
            // For now, hardcode to 1 (assuming ID 1 is an admin/host user)
            return 1;
        }
    }
}
