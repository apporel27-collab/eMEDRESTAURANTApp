using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.Data.SqlClient;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Linq;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using BCrypt.Net;
using RestaurantManagementSystem.Models;
using RestaurantManagementSystem.ViewModels;

namespace RestaurantManagementSystem.Services
{
    public class AuthService : IAuthService
    {
        private readonly IConfiguration _configuration;
        private readonly IHttpContextAccessor _httpContextAccessor;
        private readonly ILogger<AuthService> _logger;
        
        public AuthService(IConfiguration configuration, IHttpContextAccessor httpContextAccessor, ILogger<AuthService> logger = null)
        {
            _configuration = configuration;
            _httpContextAccessor = httpContextAccessor;
            _logger = logger;
        }
        
        public async Task<(bool Success, string Message, ClaimsPrincipal Principal)> AuthenticateUserAsync(string username, string password)
        {
            try
            {
                _logger?.LogInformation("Attempting to authenticate user: {Username}", username);
                
                // Debug log for connection string
                var connectionString = _configuration.GetConnectionString("DefaultConnection");
                _logger?.LogInformation("Using connection string: {ConnectionString}", 
                    connectionString?.Substring(0, Math.Min(connectionString?.Length ?? 0, 30)) + "..." ?? "NULL");
                
                var user = await GetUserByUsernameAsync(username);
            
                if (user == null)
                {
                    _logger?.LogWarning("Authentication failed: User not found: {Username}", username);
                    return (false, "Invalid username or password", null);
                }
                
                                _logger?.LogInformation("User found with ID: {UserId}, Username: {Username}, Hash: {PasswordHashLength} chars", 
                    user.Id, user.Username, user.PasswordHash?.Length ?? 0);
                    
                try {
                    bool passwordVerified = VerifyPassword(password, user.PasswordHash);
                    _logger?.LogInformation("Password verification result: {Result}", passwordVerified);
                    
                    if (!passwordVerified)
                    {
                        _logger?.LogWarning("Authentication failed: Invalid password for user: {Username}", username);
                        // Increment failed login attempts
                        await IncrementFailedLoginAttemptsAsync(user.Id);
                        return (false, "Invalid username or password", null);
                    }
                } catch (Exception pwEx) {
                    _logger?.LogError(pwEx, "Error during password verification for user {Username}", username);
                    return (false, "An error occurred during password verification", null);
                }
                
                if (user.IsLockedOut)
                {
                    return (false, "Your account is locked out. Please contact an administrator.", null);
                }
                
                if (!user.IsActive)
                {
                    return (false, "Your account is not active. Please contact an administrator.", null);
                }
                
                // Reset failed login attempts
                await ResetFailedLoginAttemptsAsync(user.Id);
                
                // Get user roles
                user.Roles = await GetUserRolesAsync(user.Id);
                
                // Create claims for the user
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
                    new Claim(ClaimTypes.Name, user.Username),
                    new Claim("FullName", $"{user.FirstName} {user.LastName}".Trim()),
                    new Claim(ClaimTypes.GivenName, user.FirstName)
                };
                
                // Add email if available
                if (!string.IsNullOrEmpty(user.Email))
                {
                    claims.Add(new Claim(ClaimTypes.Email, user.Email));
                }
                
                // Add surname if available
                if (!string.IsNullOrEmpty(user.LastName))
                {
                    claims.Add(new Claim(ClaimTypes.Surname, user.LastName));
                }
                
                // Add user roles to claims
                foreach (var role in user.Roles)
                {
                    claims.Add(new Claim(ClaimTypes.Role, role.Name));
                    _logger?.LogInformation("Added role claim: {Role} for user: {Username}", role.Name, username);
                }
                
                // Create identity and principal
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                
                // Update last login time
                await UpdateLastLoginTimeAsync(user.Id);
                
                return (true, "Authentication successful", principal);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error during authentication process for user: {Username}", username);
                return (false, "An error occurred during authentication", null);
            }
        }
                    
                try {
                    bool passwordVerified = VerifyPassword(password, user.PasswordHash);
                    _logger?.LogInformation("Password verification result: {Result}", passwordVerified);
                    
                    if (!passwordVerified)
                    {
                        _logger?.LogWarning("Authentication failed: Invalid password for user: {Username}", username);
                        // Increment failed login attempts
                        await IncrementFailedLoginAttemptsAsync(user.Id);
                        return (false, "Invalid username or password", null);
                    }
                } catch (Exception pwEx) {
                    _logger?.LogError(pwEx, "Error during password verification for user {Username}", username);
                    return (false, "An error occurred during password verification", null);
                }
                
                if (user.IsLockedOut)
                {
                    return (false, "Your account is locked out. Please contact an administrator.", null);
                }
                
                if (!user.IsActive)
                {
                    return (false, "Your account is not active. Please contact an administrator.", null);
                }
                
                // Reset failed login attempts
                await ResetFailedLoginAttemptsAsync(user.Id);
                
                return (true, "Authentication successful", user);
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Authentication failed for user {Username}", username);
                return (false, "An error occurred during authentication", null);
            }
        }
        
        public async Task SignInUserAsync(ClaimsPrincipal principal, bool rememberMe)
        {
            // Sign in the user
            await _httpContextAccessor.HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                principal,
                new AuthenticationProperties
                {
                    IsPersistent = rememberMe,
                    ExpiresUtc = DateTimeOffset.UtcNow.AddHours(12)
                });
        }
        
        private async Task<User> GetUserByUsernameAsync(string username)
        {
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            using (var connection = new SqlConnection(connectionString))
            {
                try
                {
                    await connection.OpenAsync();
                    _logger?.LogInformation("Database connection opened successfully");
                    
                    using (var command = new SqlCommand("SELECT * FROM Users WHERE Username = @Username", connection))
                    {
                        command.Parameters.AddWithValue("@Username", username);
                        _logger?.LogInformation("Executing query for username: {Username}", username);
                        
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                _logger?.LogInformation("User found in database");
                                
                                // Debug log all columns to help diagnose issues
                                var columnNames = new List<string>();
                                for (int i = 0; i < reader.FieldCount; i++)
                                {
                                    columnNames.Add(reader.GetName(i));
                                }
                                _logger?.LogInformation("Columns in Users table: {Columns}", string.Join(", ", columnNames));
                                
                                // Extract the password hash directly to check its format
                                string passwordHash = reader["PasswordHash"]?.ToString();
                                _logger?.LogInformation("Raw PasswordHash: {PasswordHash}", passwordHash ?? "NULL");
                                
                                return new User
                                {
                                    Id = Convert.ToInt32(reader["Id"]),
                                    Username = reader["Username"].ToString(),
                                    PasswordHash = passwordHash,
                                    FirstName = reader["FirstName"].ToString(),
                                    LastName = reader.IsDBNull(reader.GetOrdinal("LastName")) ? null : reader["LastName"].ToString(),
                                    Email = reader.IsDBNull(reader.GetOrdinal("Email")) ? null : reader["Email"].ToString(),
                                    IsActive = Convert.ToBoolean(reader["IsActive"]),
                                    IsLockedOut = Convert.ToBoolean(reader["IsLockedOut"]),
                                    RequiresMFA = reader.IsDBNull(reader.GetOrdinal("RequiresMFA")) ? false : Convert.ToBoolean(reader["RequiresMFA"]),
                                    CreatedAt = Convert.ToDateTime(reader["CreatedAt"])
                                };
                            }
                            else
                            {
                                _logger?.LogWarning("No user found with username: {Username}", username);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    _logger?.LogError(ex, "Error retrieving user from database");
                }
                
            }
            
            return null;
        }
        
        private async Task<List<Role>> GetUserRolesAsync(int userId)
        {
            var roles = new List<Role>();
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                using (var command = new SqlCommand(
                    "SELECT r.* FROM Roles r " +
                    "INNER JOIN UserRoles ur ON r.Id = ur.RoleId " +
                    "WHERE ur.UserId = @UserId", connection))
                {
                    command.Parameters.AddWithValue("@UserId", userId);
                    
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            roles.Add(new Role
                            {
                                Id = Convert.ToInt32(reader["Id"]),
                                Name = reader["Name"].ToString()
                            });
                        }
                    }
                }
            }
            
            return roles;
        }
        
        private async Task<List<string>> GetRolePermissionsAsync(int roleId)
        {
            var permissions = new List<string>();
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                using (var command = new SqlCommand(
                    "SELECT p.Name FROM Permissions p " +
                    "INNER JOIN RolePermissions rp ON p.Id = rp.PermissionId " +
                    "WHERE rp.RoleId = @RoleId", connection))
                {
                    command.Parameters.AddWithValue("@RoleId", roleId);
                    
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            permissions.Add(reader["Name"].ToString());
                        }
                    }
                }
            }
            
            return permissions;
        }
        
        private async Task UpdateLastLoginTimeAsync(int userId)
        {
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                using (var command = new SqlCommand(
                    "UPDATE Users SET LastLoginDate = @LastLoginDate WHERE Id = @UserId", connection))
                {
                    command.Parameters.AddWithValue("@LastLoginDate", DateTime.Now);
                    command.Parameters.AddWithValue("@UserId", userId);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }
        
        public async Task SignOutUserAsync()
        {
            await _httpContextAccessor.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }
        
        private async Task IncrementFailedLoginAttemptsAsync(int userId)
        {
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                // First get the current count
                int failedAttempts = 0;
                using (var command = new SqlCommand(
                    "SELECT FailedLoginAttempts FROM Users WHERE Id = @UserId", connection))
                {
                    command.Parameters.AddWithValue("@UserId", userId);
                    var result = await command.ExecuteScalarAsync();
                    if (result != DBNull.Value)
                    {
                        failedAttempts = Convert.ToInt32(result);
                    }
                }
                
                failedAttempts++;
                
                // Then update, potentially locking the account
                bool lockAccount = failedAttempts >= 5; // Lock after 5 failed attempts
                
                using (var command = new SqlCommand(
                    "UPDATE Users SET FailedLoginAttempts = @FailedLoginAttempts, IsLockedOut = @IsLockedOut WHERE Id = @UserId", connection))
                {
                    command.Parameters.AddWithValue("@FailedLoginAttempts", failedAttempts);
                    command.Parameters.AddWithValue("@IsLockedOut", lockAccount);
                    command.Parameters.AddWithValue("@UserId", userId);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }
        
        private async Task ResetFailedLoginAttemptsAsync(int userId)
        {
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                using (var command = new SqlCommand(
                    "UPDATE Users SET FailedLoginAttempts = 0 WHERE Id = @UserId", connection))
                {
                    command.Parameters.AddWithValue("@UserId", userId);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }
        
        private string HashPassword(string password)
        {
            // Use BCrypt for password hashing
            return BCrypt.Net.BCrypt.HashPassword(password);
        }
        
        private bool VerifyPassword(string password, string hash)
        {
            // Verify the password using BCrypt
            return BCrypt.Net.BCrypt.Verify(password, hash);
        }
        
        private string GenerateSalt()
        {
            var salt = new byte[16];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(salt);
            }
            return Convert.ToBase64String(salt);
        }
        
        public async Task<(bool success, string message)> RegisterUserAsync(User user, int createdByUserId)
        {
            try
            {
                var connectionString = _configuration.GetConnectionString("DefaultConnection");
                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.OpenAsync();
                    
                    // Check if username or email already exists
                    using (var command = new SqlCommand("SELECT COUNT(1) FROM Users WHERE Username = @Username OR Email = @Email", connection))
                    {
                        command.Parameters.AddWithValue("@Username", user.Username);
                        command.Parameters.AddWithValue("@Email", user.Email ?? (object)DBNull.Value);
                        
                        int count = Convert.ToInt32(await command.ExecuteScalarAsync());
                        if (count > 0)
                        {
                            return (false, "Username or email is already in use.");
                        }
                    }
                    
                    // Hash the password
                    string passwordHash = HashPassword(user.Password);
                    
                    // Insert the new user
                    using (var command = new SqlCommand(
                        "INSERT INTO Users (Username, PasswordHash, FirstName, LastName, Email, Phone, IsActive, RequiresMFA, MustChangePassword, CreatedAt, UpdatedAt, CreatedBy) " +
                        "VALUES (@Username, @PasswordHash, @FirstName, @LastName, @Email, @Phone, @IsActive, @RequiresMFA, @MustChangePassword, @CreatedAt, @UpdatedAt, @CreatedBy); " +
                        "SELECT SCOPE_IDENTITY();", connection))
                    {
                        command.Parameters.AddWithValue("@Username", user.Username);
                        command.Parameters.AddWithValue("@PasswordHash", passwordHash);
                        command.Parameters.AddWithValue("@FirstName", user.FirstName);
                        command.Parameters.AddWithValue("@LastName", user.LastName ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@Email", user.Email ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@Phone", user.Phone ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@IsActive", user.IsActive);
                        command.Parameters.AddWithValue("@RequiresMFA", user.RequiresMFA);
                        command.Parameters.AddWithValue("@MustChangePassword", true); // New users should change password
                        command.Parameters.AddWithValue("@CreatedAt", DateTime.Now);
                        command.Parameters.AddWithValue("@UpdatedAt", DateTime.Now);
                        command.Parameters.AddWithValue("@CreatedBy", createdByUserId);
                        
                        // Get the new user ID
                        var newUserId = Convert.ToInt32(await command.ExecuteScalarAsync());
                        
                        // Add role assignments
                        if (user.SelectedRoleIds != null && user.SelectedRoleIds.Any())
                        {
                            foreach (var roleId in user.SelectedRoleIds)
                            {
                                using (var roleCommand = new SqlCommand(
                                    "INSERT INTO UserRoles (UserId, RoleId, AssignedAt, AssignedBy) " +
                                    "VALUES (@UserId, @RoleId, @AssignedAt, @AssignedBy)", connection))
                                {
                                    roleCommand.Parameters.AddWithValue("@UserId", newUserId);
                                    roleCommand.Parameters.AddWithValue("@RoleId", roleId);
                                    roleCommand.Parameters.AddWithValue("@AssignedAt", DateTime.Now);
                                    roleCommand.Parameters.AddWithValue("@AssignedBy", createdByUserId);
                                    await roleCommand.ExecuteNonQueryAsync();
                                }
                            }
                        }
                    }
                    
                    return (true, "User registered successfully.");
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error registering user {Username}", user.Username);
                return (false, $"An error occurred: {ex.Message}");
            }
        }
        
        public async Task<(bool success, string message)> UpdateUserAsync(User user, int updatedByUserId)
        {
            try
            {
                var connectionString = _configuration.GetConnectionString("DefaultConnection");
                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.OpenAsync();
                    
                    // Check if user exists
                    using (var command = new SqlCommand("SELECT COUNT(1) FROM Users WHERE Id = @UserId", connection))
                    {
                        command.Parameters.AddWithValue("@UserId", user.Id);
                        int count = Convert.ToInt32(await command.ExecuteScalarAsync());
                        if (count == 0)
                        {
                            return (false, "User does not exist.");
                        }
                    }
                    
                    // Check if username or email conflicts with another user
                    using (var command = new SqlCommand("SELECT COUNT(1) FROM Users WHERE (Username = @Username OR Email = @Email) AND Id != @UserId", connection))
                    {
                        command.Parameters.AddWithValue("@Username", user.Username);
                        command.Parameters.AddWithValue("@Email", user.Email ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@UserId", user.Id);
                        
                        int count = Convert.ToInt32(await command.ExecuteScalarAsync());
                        if (count > 0)
                        {
                            return (false, "Username or email is already in use by another user.");
                        }
                    }
                    
                    // Update the user details
                    string sql = "UPDATE Users SET Username = @Username, FirstName = @FirstName, LastName = @LastName, " +
                                "Email = @Email, Phone = @Phone, IsActive = @IsActive, RequiresMFA = @RequiresMFA, " +
                                "UpdatedAt = @UpdatedAt, UpdatedBy = @UpdatedBy ";
                    
                    // Only update password if a new one is provided
                    if (!string.IsNullOrEmpty(user.Password))
                    {
                        sql += ", PasswordHash = @PasswordHash, MustChangePassword = @MustChangePassword ";
                    }
                    
                    sql += "WHERE Id = @UserId";
                    
                    using (var command = new SqlCommand(sql, connection))
                    {
                        command.Parameters.AddWithValue("@UserId", user.Id);
                        command.Parameters.AddWithValue("@Username", user.Username);
                        command.Parameters.AddWithValue("@FirstName", user.FirstName);
                        command.Parameters.AddWithValue("@LastName", user.LastName ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@Email", user.Email ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@Phone", user.Phone ?? (object)DBNull.Value);
                        command.Parameters.AddWithValue("@IsActive", user.IsActive);
                        command.Parameters.AddWithValue("@RequiresMFA", user.RequiresMFA);
                        command.Parameters.AddWithValue("@UpdatedAt", DateTime.Now);
                        command.Parameters.AddWithValue("@UpdatedBy", updatedByUserId);
                        
                        if (!string.IsNullOrEmpty(user.Password))
                        {
                            command.Parameters.AddWithValue("@PasswordHash", HashPassword(user.Password));
                            command.Parameters.AddWithValue("@MustChangePassword", false); // They just set it, so no need to change
                        }
                        
                        await command.ExecuteNonQueryAsync();
                    }
                    
                    // Update role assignments
                    if (user.SelectedRoleIds != null)
                    {
                        // First, remove all existing role assignments
                        using (var command = new SqlCommand("DELETE FROM UserRoles WHERE UserId = @UserId", connection))
                        {
                            command.Parameters.AddWithValue("@UserId", user.Id);
                            await command.ExecuteNonQueryAsync();
                        }
                        
                        // Then add the selected roles
                        foreach (var roleId in user.SelectedRoleIds)
                        {
                            using (var command = new SqlCommand(
                                "INSERT INTO UserRoles (UserId, RoleId, AssignedAt, AssignedBy) " +
                                "VALUES (@UserId, @RoleId, @AssignedAt, @AssignedBy)", connection))
                            {
                                command.Parameters.AddWithValue("@UserId", user.Id);
                                command.Parameters.AddWithValue("@RoleId", roleId);
                                command.Parameters.AddWithValue("@AssignedAt", DateTime.Now);
                                command.Parameters.AddWithValue("@AssignedBy", updatedByUserId);
                                await command.ExecuteNonQueryAsync();
                            }
                        }
                    }
                    
                    return (true, "User updated successfully.");
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error updating user {UserId}", user.Id);
                return (false, $"An error occurred: {ex.Message}");
            }
        }
        
        public async Task<(bool success, string message)> ChangePasswordAsync(int userId, string currentPassword, string newPassword)
        {
            try
            {
                // First get the user to verify current password
                var connectionString = _configuration.GetConnectionString("DefaultConnection");
                using (var connection = new SqlConnection(connectionString))
                {
                    await connection.OpenAsync();
                    
                    string currentHash = null;
                    using (var command = new SqlCommand("SELECT PasswordHash FROM Users WHERE Id = @UserId", connection))
                    {
                        command.Parameters.AddWithValue("@UserId", userId);
                        var result = await command.ExecuteScalarAsync();
                        if (result != null)
                        {
                            currentHash = result.ToString();
                        }
                    }
                    
                    if (currentHash == null || !VerifyPassword(currentPassword, currentHash))
                    {
                        return (false, "Current password is incorrect.");
                    }
                    
                    // Update to new password
                    string newHash = HashPassword(newPassword);
                    using (var command = new SqlCommand(
                        "UPDATE Users SET PasswordHash = @PasswordHash, MustChangePassword = 0, UpdatedAt = @UpdatedAt " +
                        "WHERE Id = @UserId", connection))
                    {
                        command.Parameters.AddWithValue("@PasswordHash", newHash);
                        command.Parameters.AddWithValue("@UpdatedAt", DateTime.Now);
                        command.Parameters.AddWithValue("@UserId", userId);
                        await command.ExecuteNonQueryAsync();
                    }
                    
                    return (true, "Password changed successfully.");
                }
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error changing password for user {UserId}", userId);
                return (false, $"An error occurred: {ex.Message}");
            }
        }
        
        public async Task<List<User>> GetUsersAsync()
        {
            var users = new List<User>();
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                using (var command = new SqlCommand("SELECT * FROM Users ORDER BY Username", connection))
                {
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            users.Add(new User
                            {
                                Id = Convert.ToInt32(reader["Id"]),
                                Username = reader["Username"].ToString(),
                                FirstName = reader["FirstName"].ToString(),
                                LastName = reader.IsDBNull(reader.GetOrdinal("LastName")) ? null : reader["LastName"].ToString(),
                                Email = reader.IsDBNull(reader.GetOrdinal("Email")) ? null : reader["Email"].ToString(),
                                Phone = reader.IsDBNull(reader.GetOrdinal("Phone")) ? null : reader["Phone"].ToString(),
                                IsActive = Convert.ToBoolean(reader["IsActive"]),
                                IsLockedOut = Convert.ToBoolean(reader["IsLockedOut"]),
                                RequiresMFA = reader.IsDBNull(reader.GetOrdinal("RequiresMFA")) ? false : Convert.ToBoolean(reader["RequiresMFA"]),
                                CreatedAt = Convert.ToDateTime(reader["CreatedAt"])
                            });
                        }
                    }
                }
                
                // Get roles for each user
                foreach (var user in users)
                {
                    user.Roles = await GetUserRolesAsync(user.Id);
                }
            }
            
            return users;
        }
        
        public async Task<User> GetUserForEditAsync(int userId)
        {
            User user = null;
            var connectionString = _configuration.GetConnectionString("DefaultConnection");
            
            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                
                using (var command = new SqlCommand("SELECT * FROM Users WHERE Id = @UserId", connection))
                {
                    command.Parameters.AddWithValue("@UserId", userId);
                    
                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        if (await reader.ReadAsync())
                        {
                            user = new User
                            {
                                Id = Convert.ToInt32(reader["Id"]),
                                Username = reader["Username"].ToString(),
                                FirstName = reader["FirstName"].ToString(),
                                LastName = reader.IsDBNull(reader.GetOrdinal("LastName")) ? null : reader["LastName"].ToString(),
                                Email = reader.IsDBNull(reader.GetOrdinal("Email")) ? null : reader["Email"].ToString(),
                                Phone = reader.IsDBNull(reader.GetOrdinal("Phone")) ? null : reader["Phone"].ToString(),
                                IsActive = Convert.ToBoolean(reader["IsActive"]),
                                IsLockedOut = Convert.ToBoolean(reader["IsLockedOut"]),
                                RequiresMFA = reader.IsDBNull(reader.GetOrdinal("RequiresMFA")) ? false : Convert.ToBoolean(reader["RequiresMFA"]),
                                CreatedAt = Convert.ToDateTime(reader["CreatedAt"])
                            };
                        }
                    }
                }
                
                if (user != null)
                {
                    // Get roles for the user
                    user.Roles = await GetUserRolesAsync(user.Id);
                    
                    // Get selected role IDs
                    user.SelectedRoleIds = user.Roles.Select(r => r.Id).ToList();
                }
            }
            
            return user;
        }
    }
}
