using Microsoft.EntityFrameworkCore;
using RestaurantManagementSystem.Data;
using RestaurantManagementSystem.Middleware;
using RestaurantManagementSystem.Services;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using RestaurantManagementSystem.Utilities;

namespace RestaurantManagementSystem
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);
            
            // Optimize builder configuration for faster startup
            builder.Configuration.SetBasePath(Directory.GetCurrentDirectory());
            
            // Add services to the container with optimizations
            builder.Services.AddControllersWithViews(options =>
            {
                // Optimizations for development
                if (builder.Environment.IsDevelopment())
                {
                    options.ModelValidatorProviders.Clear();
                }
            });
            builder.Services.AddHttpContextAccessor();

            // Simplified authentication for development
            if (builder.Environment.IsDevelopment())
            {
                // Minimal authentication for development speed
                builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                    .AddCookie(options =>
                    {
                        options.ExpireTimeSpan = TimeSpan.FromHours(12);
                        options.LoginPath = "/Account/Login";
                        options.Cookie.HttpOnly = true;
                        options.Cookie.SecurePolicy = CookieSecurePolicy.SameAsRequest;
                    });
                
                builder.Services.AddAuthorization();
            }
            else
            {
                // Full authentication for production
                builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                    .AddCookie(options =>
                    {
                        options.ExpireTimeSpan = TimeSpan.FromHours(12);
                        options.SlidingExpiration = true;
                        options.AccessDeniedPath = "/Account/AccessDenied";
                        options.LoginPath = "/Account/Login";
                        options.LogoutPath = "/Account/Logout";
                        options.Cookie.HttpOnly = true;
                        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
                        options.Cookie.SameSite = SameSiteMode.Strict;
                    });

                builder.Services.AddAuthorization(options =>
                {
                    options.AddPolicy("RequireAdminRole", policy => policy.RequireRole("Administrator"));
                    options.AddPolicy("RequireManagerRole", policy => policy.RequireRole("Administrator", "Manager"));
                    options.AddPolicy("RequireStaffRole", policy => policy.RequireRole("Administrator", "Manager", "Staff"));
                });
            }

            // Register custom services (temporarily disabled for startup debugging)
            if (!builder.Environment.IsDevelopment())
            {
                // Full services for production
                builder.Services.AddScoped<IAuthService, AuthService>();
                builder.Services.AddScoped<UserService>();
                builder.Services.AddScoped<UserRoleService>();
                builder.Services.AddScoped<AdminSetupService>();
                builder.Services.AddScoped<PasswordResetTool>();
            }

            // Skip database for development startup debugging
            if (builder.Environment.IsDevelopment())
            {
                // Commented out to test if database is causing startup hang
                // Will re-enable once we identify the issue
                /*
                builder.Services.AddDbContext<RestaurantDbContext>(options =>
                {
                    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
                    options.UseSqlServer(connectionString, sqlOptions =>
                    {
                        sqlOptions.CommandTimeout(30);
                        sqlOptions.EnableRetryOnFailure(maxRetryCount: 1);
                    });
                    options.EnableSensitiveDataLogging(false);
                    options.EnableDetailedErrors(false);
                    options.EnableServiceProviderCaching(true);
                });
                */
            }
            else
            {
                // Full database setup for production
                builder.Services.AddDbContext<RestaurantDbContext>(options =>
                {
                    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
                    options.UseSqlServer(connectionString, sqlOptions =>
                    {
                        sqlOptions.CommandTimeout(30);
                        sqlOptions.EnableRetryOnFailure(maxRetryCount: 1);
                    });
                });
            }
                
            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }
            else
            {
                // In development, enable detailed error pages
                app.UseDeveloperExceptionPage();
            }

            // Optimize middleware pipeline for development
            if (app.Environment.IsDevelopment())
            {
                // Skip HTTPS redirection in development for faster startup
                // app.UseHttpsRedirection();
            }
            else
            {
                app.UseHttpsRedirection();
            }
            
            app.UseStaticFiles();
            app.UseRouting();
            
            // Skip heavy middleware in development
            if (!app.Environment.IsDevelopment())
            {
                app.UseMiddleware<DatabaseColumnFixMiddleware>();
            }
            
            // Skip authentication in development for faster startup
            if (!app.Environment.IsDevelopment())
            {
                app.UseAuthentication();
                app.UseAuthorization();
            }

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Home}/{action=Index}/{id?}");

            // Skip admin setup entirely in development for faster startup
            if (!app.Environment.IsDevelopment())
            {
                // Only run admin setup in production
                _ = Task.Run(async () =>
                {
                    using var scope = app.Services.CreateScope();
                    try
                    {
                        var adminSetupService = scope.ServiceProvider.GetRequiredService<AdminSetupService>();
                        await adminSetupService.EnsureAdminUserAsync();
                    }
                    catch (Exception ex)
                    {
                        var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
                        logger.LogError(ex, "Error during background admin setup");
                    }
                });
            }

            app.Run();
        }
    }
}
